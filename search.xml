<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS193p_assignment3</title>
    <url>/2022/03/20/cs193-a3/</url>
    <content><![CDATA[<h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><blockquote>
<p>实施一个单人游戏Set</p>
</blockquote>
<h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><blockquote>
<p>所有卡片可见，卡片尽可能的大。也可以增加一个最小尺寸，然后恢复滚动。所有的卡片都必须可识别</p>
</blockquote>
<span id="more"></span>

<h3 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h3><blockquote>
<p>有相同的长宽比</p>
</blockquote>
<h3 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h3><blockquote>
<p>符号的大小根据卡片大小决定</p>
</blockquote>
<h3 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h3><blockquote>
<p>选择三张牌匹配，能够看到哪些牌已经被选中</p>
</blockquote>
<h3 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h3><blockquote>
<p>只要有三张牌被选中，要显示是否匹配，不匹配的三个和只选择1或2张牌时看起来不一样</p>
</blockquote>
<h3 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h3><blockquote>
<p>支持点击已经选中的牌取消选中，只选择1或2时</p>
</blockquote>
<h3 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h3><blockquote>
<p>没读明白啊，回头再说</p>
<p>当任何一张牌被触摸到，并且已经有3张相匹配的套装牌被选中。<br>那么…<br>a. 按照 “套牌 “的规则，用新的 “套牌 “替换这3张匹配的牌。牌<br>b. 如果这副牌是空的，那么就把那些匹配的牌所空出来的位置（因为没有更多的牌，所以不能被替换）。b. 如果这副牌是空的，那么这副牌所腾出的空间（因为没有更多的牌，所以不能被替换）就应该让给剩余的 的牌（也就是说，这些牌很可能会变大）。<br>c. 如果被碰的牌不属于匹配的牌组，则选择该牌。<br>d. 如果被摸到的牌是匹配组的一部分，那么就不选择任何牌。</p>
</blockquote>
<h3 id="Task-9"><a href="#Task-9" class="headerlink" title="Task 9"></a>Task 9</h3><blockquote>
<p>有三张不匹配的牌被选中，取消这三张牌，选中点击的牌</p>
</blockquote>
<h3 id="Task-10"><a href="#Task-10" class="headerlink" title="Task 10"></a>Task 10</h3><blockquote>
<p>有“Deal 3 More Cards”按钮</p>
<p>你需要有一个 “再发3张牌 “的按钮（根据Set的规则）。<br>a. 当它被触动时，如果所选的牌组成了一套牌，则替换所选的牌。<br>b. 或者，如果所选的牌不组成一套牌（或者所选的牌少于3张，包括没有），则增加3张新牌，加入屏幕上已经出现的牌（并且不影响选择）。<br>c. 如果牌组是空的，则禁用此按钮。</p>
</blockquote>
<h3 id="Task-11"><a href="#Task-11" class="headerlink" title="Task 11"></a>Task 11</h3><blockquote>
<p>有一个“New Game”按钮，开始新游戏，回到12个随机卡</p>
</blockquote>
<h3 id="Task-12"><a href="#Task-12" class="headerlink" title="Task 12"></a>Task 12</h3><blockquote>
<p>用长方形代替弯曲</p>
</blockquote>
<h3 id="Task-13"><a href="#Task-13" class="headerlink" title="Task 13"></a>Task 13</h3><blockquote>
<p>自己编写Shape结构制作“diamond”</p>
</blockquote>
<h3 id="Task-14"><a href="#Task-14" class="headerlink" title="Task 14"></a>Task 14</h3><blockquote>
<p>条纹表示为半透明，和纯色区分开</p>
</blockquote>
<h3 id="Task-15-amp-16"><a href="#Task-15-amp-16" class="headerlink" title="Task 15&amp;16"></a>Task 15&amp;16</h3><blockquote>
<p>使用枚举作为方案中有意义的部分，使用闭包(一个作为参数的函数)，三个不同颜色</p>
</blockquote>
]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193p_assignment2</title>
    <url>/2022/02/18/cs193p-ls/</url>
    <content><![CDATA[<p>​    一个历时很久的blog，学完Lesson4之后，自己码的Assignment2的代码，也不知道对不对（毕竟没有参考代码），仅供参考啊</p>
<h3 id="Task1-amp-2-省略"><a href="#Task1-amp-2-省略" class="headerlink" title="Task1&amp;2: 省略"></a>Task1&amp;2: 省略</h3><h3 id="Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色"><a href="#Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色" class="headerlink" title="Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色"></a>Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色</h3><p>创建一个结构体存储主题</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">Theme</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">var</span> emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token class-name">Int</span>
    <span class="token keyword">var</span> color<span class="token punctuation">:</span> <span class="token class-name">String</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<h3 id="Task4-amp-8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题"><a href="#Task4-amp-8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题" class="headerlink" title="Task4&amp;8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题"></a>Task4&amp;8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> themes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Theme</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>
        name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Veiche"</span></span><span class="token punctuation">,</span>
        emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"🚌"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚗"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚓"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚑"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛻"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🏎"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚲"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚂"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"✈️"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚀"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛶"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛸"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚕"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚙"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚎"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚛"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚁"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🏍"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦽"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚒"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚜"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚠"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚄"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛰"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
        color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"red"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>
        name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Animal"</span></span><span class="token punctuation">,</span>
        emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"🐶"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐱"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐭"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐰"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦊"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐻"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐼"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐮"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐵"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐧"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦋"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐢"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐝"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦆"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐙"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦐"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦀"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
        color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"blue"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Face"</span></span><span class="token punctuation">,</span>
           emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"😀"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"☺️"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😊"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😇"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥰"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😌"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😉"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🙃"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😋"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🤨"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😏"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😒"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😭"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥵"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😳"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🤔"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🤗"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😷"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
           color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"green"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment">//添加6种</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> emojis <span class="token operator">=</span> theme<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Task5-amp-6-amp-7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片-主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量"><a href="#Task5-amp-6-amp-7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片-主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量" class="headerlink" title="Task5&amp;6&amp;7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片 主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量"></a>Task5&amp;6&amp;7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片 主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> pairs <span class="token operator">=</span> emojis<span class="token punctuation">.</span>count
       <span class="token keyword">if</span> pairs <span class="token operator">></span> theme<span class="token punctuation">.</span>numberOfPairsOfCards <span class="token punctuation">&#123;</span>
           pairs <span class="token operator">=</span> theme<span class="token punctuation">.</span>numberOfPairsOfCards
       <span class="token punctuation">&#125;</span>
       <span class="token comment">//model的数据类型是model结构</span>
       <span class="token keyword">return</span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span>numberOfPairsOfCards<span class="token punctuation">:</span> pairs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> pairIndex <span class="token keyword">in</span>
           emojis<span class="token punctuation">[</span>pairIndex<span class="token punctuation">]</span>
       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Task9：新主题能通过代码被添加到游戏中"><a href="#Task9：新主题能通过代码被添加到游戏中" class="headerlink" title="Task9：新主题能通过代码被添加到游戏中"></a>Task9：新主题能通过代码被添加到游戏中</h3><h3 id="Task10-amp-11：在UI中添加”New-Game”按钮，开始新的游戏，开始游戏应重新选择主题"><a href="#Task10-amp-11：在UI中添加”New-Game”按钮，开始新的游戏，开始游戏应重新选择主题" class="headerlink" title="Task10&amp;11：在UI中添加”New Game”按钮，开始新的游戏，开始游戏应重新选择主题"></a>Task10&amp;11：在UI中添加”New Game”按钮，开始新的游戏，开始游戏应重新选择主题</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>
    viewModel<span class="token punctuation">.</span><span class="token function">newGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Game"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span>startTheme<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	theme <span class="token operator">=</span> themes<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>
	cardcolor <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
	model <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">createMemoryGame</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function-definition function">newGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	theme <span class="token operator">=</span> themes<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>
	cardcolor <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
	model <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">createMemoryGame</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Task12-amp-13：游戏中卡片正面朝下-新游戏卡片被打乱"><a href="#Task12-amp-13：游戏中卡片正面朝下-新游戏卡片被打乱" class="headerlink" title="Task12&amp;13：游戏中卡片正面朝下,新游戏卡片被打乱"></a>Task12&amp;13：游戏中卡片正面朝下,新游戏卡片被打乱</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span>numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> creatCardContent<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CardContent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    cards <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Card</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//添加两倍的卡牌</span>
    <span class="token keyword">for</span> pairIndex <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>numberOfPairsOfCards <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token function">creatCardContent</span><span class="token punctuation">(</span>pairIndex<span class="token punctuation">)</span>
        cards<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Card</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> content<span class="token punctuation">,</span> id<span class="token punctuation">:</span> pairIndex<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        cards<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Card</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> content<span class="token punctuation">,</span> id<span class="token punctuation">:</span> pairIndex<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    cards<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
    
<span class="token keyword">struct</span> <span class="token class-name">Card</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> isFaceUp<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">var</span> isMatched<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token class-name">CardContent</span>
    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span>
    <span class="token keyword">var</span> seen<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Task14-amp-16：在UI中显示主题的名称和分数"><a href="#Task14-amp-16：在UI中显示主题的名称和分数" class="headerlink" title="Task14&amp;16：在UI中显示主题的名称和分数"></a>Task14&amp;16：在UI中显示主题的名称和分数</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Theme:  </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">viewModel<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
        
    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Score:    </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">viewModel<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Task15：匹配成功分数-2，匹配不成功且每含有一张被看见过的牌分数-2"><a href="#Task15：匹配成功分数-2，匹配不成功且每含有一张被看见过的牌分数-2" class="headerlink" title="Task15：匹配成功分数+2，匹配不成功且每含有一张被看见过的牌分数-2"></a>Task15：匹配成功分数+2，匹配不成功且每含有一张被看见过的牌分数-2</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">choose</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> card<span class="token punctuation">:</span> <span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> chosenIndex <span class="token operator">=</span> cards<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> card<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token operator">!</span>cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp<span class="token punctuation">,</span>
       <span class="token operator">!</span>cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isMatched
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> potentialMatchIndex <span class="token operator">=</span> indexOfTheOneAndOnlyFaceUpCard <span class="token punctuation">&#123;</span> <span class="token comment">//如果有纸牌被掀开</span>
            <span class="token keyword">if</span> cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token operator">==</span> cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token punctuation">&#123;</span> <span class="token comment">//能匹配</span>
                cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isMatched <span class="token operator">=</span> <span class="token boolean">true</span>
                cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isMatched <span class="token operator">=</span> <span class="token boolean">true</span>
                score <span class="token operator">+=</span> <span class="token number">2</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token punctuation">&#123;</span>
                    score <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token punctuation">&#123;</span>
                    score <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token punctuation">&#125;</span>
                cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token operator">=</span> <span class="token boolean">true</span>
                cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span>
            
            indexOfTheOneAndOnlyFaceUpCard <span class="token operator">=</span> <span class="token nil constant">nil</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> index <span class="token keyword">in</span> cards<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>
                cards<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">&#125;</span>
            
            indexOfTheOneAndOnlyFaceUpCard <span class="token operator">=</span> chosenIndex
        <span class="token punctuation">&#125;</span>
        
        cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><p>ContentView.swift</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>


<span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> viewModel<span class="token punctuation">:</span> <span class="token class-name">EmojiMemoryGame</span>

 
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        
        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>
                viewModel<span class="token punctuation">.</span><span class="token function">newGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Game"</span></span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Theme:  </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">viewModel<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
                    
                <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Score:    </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">viewModel<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>
            
            <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">.</span>cards<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> card <span class="token keyword">in</span>
                    <span class="token class-name">CardView</span><span class="token punctuation">(</span>card<span class="token punctuation">:</span> card<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span>onTapGesture<span class="token punctuation">&#123;</span>
                            viewModel<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span>
                        <span class="token punctuation">&#125;</span>
                    
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">.</span>cardcolor<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">struct</span> <span class="token class-name">CardView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> card<span class="token punctuation">:</span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token class-name">Card</span>
    
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ZStack</span><span class="token punctuation">&#123;</span>
            
            <span class="token keyword">let</span> shape <span class="token operator">=</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> card<span class="token punctuation">.</span>isFaceUp <span class="token punctuation">&#123;</span>
                shape<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>
                shape<span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>
                <span class="token class-name">Text</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> card<span class="token punctuation">.</span>isMatched <span class="token punctuation">&#123;</span>
                shape<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                shape<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">ContentView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ContentView</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">:</span> game<span class="token punctuation">)</span>
            
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>EmojiMemoryGame.swift</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span>

<span class="token keyword">class</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">createMemoryGame</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> <span class="token comment">//添加参数</span>
        <span class="token keyword">let</span> emojis <span class="token operator">=</span> theme<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> pairs <span class="token operator">=</span> emojis<span class="token punctuation">.</span>count
        <span class="token keyword">if</span> pairs <span class="token operator">></span> theme<span class="token punctuation">.</span>numberOfPairsOfCards <span class="token punctuation">&#123;</span>
            pairs <span class="token operator">=</span> theme<span class="token punctuation">.</span>numberOfPairsOfCards
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//model的数据类型是model结构</span>
        <span class="token keyword">return</span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span>numberOfPairsOfCards<span class="token punctuation">:</span> pairs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> pairIndex <span class="token keyword">in</span>
            emojis<span class="token punctuation">[</span>pairIndex<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
            
    <span class="token punctuation">&#125;</span>
    <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span> <span class="token keyword">var</span> model<span class="token punctuation">:</span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token comment">//初始化或静态访问静态不需要全名</span>
    <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> cardcolor<span class="token punctuation">:</span> <span class="token class-name">Color</span>
    <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> theme<span class="token punctuation">:</span> <span class="token class-name">Theme</span>
    
    <span class="token keyword">init</span><span class="token punctuation">(</span>startTheme<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        theme <span class="token operator">=</span> themes<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>
        cardcolor <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
        model <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">createMemoryGame</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">//返回view model 变量类型是数组&lt;model中的Card>结构</span>
    <span class="token keyword">var</span> cards<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token class-name">Card</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> model<span class="token punctuation">.</span>cards<span class="token comment">//返回model中的cards数组 数组的结构是Card</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">color</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"red"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"green"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>green
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"yellow"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>yellow
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"blue"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"purple"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>purple
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"pink"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>pink
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"gray"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>gray
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>color <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"orange"</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>orange
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>gray
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> model<span class="token punctuation">.</span>score
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// MARK: - Intent(s)</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">choose</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> card<span class="token punctuation">:</span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        model<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">newGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        theme <span class="token operator">=</span> themes<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>
        cardcolor <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
        model <span class="token operator">=</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token function">createMemoryGame</span><span class="token punctuation">(</span>theme<span class="token punctuation">:</span> theme<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>MemoryGame.swift</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span>

<span class="token keyword">struct</span> <span class="token class-name">MemoryGame</span><span class="token operator">&lt;</span><span class="token class-name">CardContent</span><span class="token operator">></span> <span class="token keyword">where</span> <span class="token class-name">CardContent</span><span class="token punctuation">:</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> cards<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Card</span><span class="token operator">></span>
    <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> indexOfTheOneAndOnlyFaceUpCard<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span>
    
    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">choose</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> card<span class="token punctuation">:</span> <span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> chosenIndex <span class="token operator">=</span> cards<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> card<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token operator">!</span>cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp<span class="token punctuation">,</span>
           <span class="token operator">!</span>cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isMatched
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> potentialMatchIndex <span class="token operator">=</span> indexOfTheOneAndOnlyFaceUpCard <span class="token punctuation">&#123;</span> <span class="token comment">//如果有纸牌被掀开</span>
                <span class="token keyword">if</span> cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token operator">==</span> cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token punctuation">&#123;</span> <span class="token comment">//能匹配</span>
                    cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isMatched <span class="token operator">=</span> <span class="token boolean">true</span>
                    cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isMatched <span class="token operator">=</span> <span class="token boolean">true</span>
                    score <span class="token operator">+=</span> <span class="token number">2</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token punctuation">&#123;</span>
                        score <span class="token operator">-=</span> <span class="token number">1</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span> cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token punctuation">&#123;</span>
                        score <span class="token operator">-=</span> <span class="token number">1</span>
                    <span class="token punctuation">&#125;</span>
                    cards<span class="token punctuation">[</span>potentialMatchIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token operator">=</span> <span class="token boolean">true</span>
                    cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>seen <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span>
                
                indexOfTheOneAndOnlyFaceUpCard <span class="token operator">=</span> <span class="token nil constant">nil</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> index <span class="token keyword">in</span> cards<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>
                    cards<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp <span class="token operator">=</span> <span class="token boolean">false</span>
                <span class="token punctuation">&#125;</span>
                
                indexOfTheOneAndOnlyFaceUpCard <span class="token operator">=</span> chosenIndex
            <span class="token punctuation">&#125;</span>
            
            cards<span class="token punctuation">[</span>chosenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">init</span><span class="token punctuation">(</span>numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> creatCardContent<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CardContent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cards <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Card</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">//添加两倍的卡牌</span>
        <span class="token keyword">for</span> pairIndex <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>numberOfPairsOfCards <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token function">creatCardContent</span><span class="token punctuation">(</span>pairIndex<span class="token punctuation">)</span>
            cards<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Card</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> content<span class="token punctuation">,</span> id<span class="token punctuation">:</span> pairIndex<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            cards<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Card</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> content<span class="token punctuation">,</span> id<span class="token punctuation">:</span> pairIndex<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        cards<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">struct</span> <span class="token class-name">Card</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> isFaceUp<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token keyword">var</span> isMatched<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token class-name">CardContent</span>
        <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span>
        <span class="token keyword">var</span> seen<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Theme.swift</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span>

<span class="token keyword">struct</span> <span class="token class-name">Theme</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">var</span> emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token class-name">Int</span>
    <span class="token keyword">var</span> color<span class="token punctuation">:</span> <span class="token class-name">String</span>
    
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> themes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Theme</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>
        name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Veiche"</span></span><span class="token punctuation">,</span>
        emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"🚌"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚗"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚓"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚑"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛻"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🏎"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚲"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚂"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"✈️"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚀"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛶"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛸"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚕"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚙"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚎"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚛"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚁"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🏍"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦽"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚒"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚜"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚠"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🚄"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🛰"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
        color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"red"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>
        name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Animal"</span></span><span class="token punctuation">,</span>
        emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"🐶"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐱"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐭"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐰"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦊"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐻"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐼"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐮"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐵"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐧"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦋"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐢"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐝"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦆"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🐙"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦐"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🦀"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
        color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"blue"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Face"</span></span><span class="token punctuation">,</span>
           emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"😀"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"☺️"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😊"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😇"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥰"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😌"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😉"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🙃"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😋"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🤨"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😏"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😒"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😭"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥵"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😳"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🤔"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🤗"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😷"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
           color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"green"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Hallowmans"</span></span><span class="token punctuation">,</span>
           emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"👻"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🎃"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"😈"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍬"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🕷"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
           color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"orange"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Theme</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Foot"</span></span><span class="token punctuation">,</span>
           emojis<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"🎂"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍡"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍱"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍛"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍝"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🌯"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍕"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍟"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍔"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🌭"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍗"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥗"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍲"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍤"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥮"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥧"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍩"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍪"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍵"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🍞"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥐"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥖"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🥞"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"🫕"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           numberOfPairsOfCards<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
           color<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"purple"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参考代码：<a href="https://github.com/sk-ruban/CS193p">https://github.com/sk-ruban/CS193p</a></p>
]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193p_note 1-4</title>
    <url>/2022/02/20/cs193-note1-2/</url>
    <content><![CDATA[<h3 id="RoundedRectangle"><a href="#RoundedRectangle" class="headerlink" title="RoundedRectangle"></a>RoundedRectangle</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//填满</span>
	<span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token comment">//前景颜色</span>
	<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//边框宽度</span>
	<span class="token punctuation">.</span>strokeBorder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h3 id="ZStack"><a href="#ZStack" class="headerlink" title="ZStack"></a>ZStack</h3><p>在z轴叠加视图，返回一整个视图内容</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//在顶部对齐</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="HStack"><a href="#HStack" class="headerlink" title="HStack"></a>HStack</h3><p>水平堆叠</p>
<h3 id="LazyVGrid"><a href="#LazyVGrid" class="headerlink" title="LazyVGrid"></a>LazyVGrid</h3><p>网格，指定列数，把尽可能多的东西放在一行，垂直滑动，搭配ScrollView使用</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>分离了用户界面代码</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>完全独立于UI data 和 logic，app实际上做什么</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>反映model内容 响应式</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@ObservedObject</span>
<span class="token attribute atrule">@Binding</span>
<span class="token punctuation">.</span>onReceive
<span class="token attribute atrule">@EnvironmentObject</span>
<span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="ModelView"><a href="#ModelView" class="headerlink" title="ModelView"></a>ModelView</h4><p>绑定view和model，解释器。View通过ViewModel获取Model的数据，从来不储存数据。</p>
<p>ViewModel不断观察Model中的变化，发布变化，视图subscribing（订阅），发布的内容。使用class</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@ObservableObject</span>
<span class="token attribute atrule">@Published</span>
objectWillChange<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>处理用户意图，修改Model内容</p>
<h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><h4 id="struct-amp-amp-class"><a href="#struct-amp-amp-class" class="headerlink" title="struct &amp;&amp; class"></a>struct &amp;&amp; class</h4><p>储存变量和计算变量、函数、初始化器</p>
<p>ViewModel使用class，在所有视图中共享</p>
<table>
<thead>
<tr>
<th align="center">struct</th>
<th align="center">class</th>
</tr>
</thead>
<tbody><tr>
<td align="center">值类型</td>
<td align="center">引用类型</td>
</tr>
<tr>
<td align="center">传递或分配变量时复制内容</td>
<td align="center">传递时只传递指向它的指针</td>
</tr>
<tr>
<td align="center">写时复制，直到修改才会复制完整内容</td>
<td align="center">自动引用计数，跟踪有多少指向某事物的指针，没人指向时，从内存中删除</td>
</tr>
<tr>
<td align="center">函数式编程</td>
<td align="center">面对对象编程</td>
</tr>
<tr>
<td align="center">没有继承</td>
<td align="center">单一继承</td>
</tr>
<tr>
<td align="center">免费初始化所有变量，如果没有编写init函数</td>
<td align="center">不能初始化变量</td>
</tr>
<tr>
<td align="center">明确的定义 var let</td>
<td align="center">总是可变的</td>
</tr>
</tbody></table>
<h4 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h4><p>对不知道类型上的数据，不在乎它是什么类型</p>
<p>类型参数</p>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> operation<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span>

<span class="token keyword">func</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>operand<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> operand <span class="token operator">*</span> operand
<span class="token punctuation">&#125;</span>

operation <span class="token operator">=</span> square
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//16 	调用时不使用标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="反应"><a href="#反应" class="headerlink" title="反应"></a>反应</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@ObservableObject</span> <span class="token comment">//向世界发布有所改变</span>
<span class="token comment">//得到一个看不见的var</span>
<span class="token keyword">var</span> objectWillChange<span class="token punctuation">:</span> <span class="token class-name">ObservableObjectPublisher</span>
objectWillChange<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//向世界发送改变</span>
<span class="token attribute atrule">@Published</span> <span class="token comment">//放在变量前无论何时发生变化都发送</span>
<span class="token attribute atrule">@ObservedObject</span> <span class="token comment">//放在变量前，发生改变时重建body</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p>数据结构，离散的值</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">FastFoodMenuItem</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> hamburger
    <span class="token keyword">case</span> fries
    <span class="token keyword">case</span> drink
    <span class="token keyword">case</span> cookie
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>值传递，会被复制</li>
</ul>
<p>每个状态都可以有一些关联数据</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">FastFoodMenuItem</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token function">hamburger</span><span class="token punctuation">(</span>numberOfPatties<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">fries</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">FryOrderSize</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">drink</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> ounces<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token comment">//string没有标签</span>
    <span class="token keyword">case</span> cookie
<span class="token punctuation">&#125;</span>
<span class="token keyword">enum</span> <span class="token class-name">FryOrderSize</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> large
    <span class="token keyword">case</span> small
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> menuItem<span class="token punctuation">:</span> <span class="token class-name">FastFoodMenuItem</span> <span class="token operator">=</span> <span class="token class-name">FastFoodMenuItem</span><span class="token punctuation">.</span><span class="token function">hamburger</span><span class="token punctuation">(</span>patties<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> otherItem<span class="token punctuation">:</span> <span class="token class-name">FastFoodMenuItem</span> <span class="token operator">=</span> <span class="token punctuation">.</span>cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>检查值</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> menuItem<span class="token punctuation">:</span> <span class="token class-name">FastFoodMenuItem</span> <span class="token operator">=</span> <span class="token class-name">FastFoodMenuItem</span><span class="token punctuation">.</span><span class="token function">hamburger</span><span class="token punctuation">(</span>patties<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">switch</span> menuItem <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">hamburger</span><span class="token punctuation">(</span><span class="token keyword">let</span> pattyCount<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"a burger with </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">pattyCOunt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> patties!"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>fries<span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"fries"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>drink<span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"drink"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token punctuation">.</span>cookie<span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"cookie"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"other"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>switch也适用于其他类型</p>
<p>enum允许有方法和计算变量，不能有实际存储的变量</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">FastFoodMenuItem</span> <span class="token punctuation">&#123;</span>
    
    fun <span class="token function">isIncludeInSpeciaOrder</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">hamburger</span><span class="token punctuation">(</span><span class="token keyword">let</span> pattyCount<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> pattyCount <span class="token operator">==</span> number
            <span class="token keyword">case</span> <span class="token punctuation">.</span>fries<span class="token punctuation">,</span> <span class="token punctuation">.</span>cookie<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
            <span class="token keyword">case</span><span class="token punctuation">.</span><span class="token function">drink</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">,</span> <span class="token keyword">let</span> ounces<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> ounces <span class="token operator">==</span> <span class="token number">16</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>遍历所有状态，迭代</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">TeslaModel</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token class-name">X</span>
    <span class="token keyword">case</span> <span class="token class-name">S</span>
    <span class="token keyword">case</span> <span class="token class-name">Three</span>
    <span class="token keyword">case</span> <span class="token class-name">Y</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> model <span class="token keyword">in</span> <span class="token class-name">TeslaModel</span><span class="token punctuation">.</span>allCase <span class="token punctuation">&#123;</span>
    <span class="token function">reportSalesNumber</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> model<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fun <span class="token function">reportSalesNumber</span><span class="token punctuation">(</span><span class="token keyword">for</span> model<span class="token punctuation">:</span> <span class="token class-name">TeslaModel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> model <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h3><p>两种枚举：存在和不存在</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token keyword">none</span>
    <span class="token keyword">case</span> <span class="token keyword">some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> hello<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>
<span class="token keyword">var</span> hello<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hello"</span></span>
<span class="token keyword">var</span> hello<span class="token punctuation">:</span> <span class="token class-name">Striong</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>	<span class="token keyword">var</span> hello<span class="token punctuation">:</span> <span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">none</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>强制解包 !  或者使用if let</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> safehello <span class="token operator">=</span> hello <span class="token punctuation">&#123;</span>
	<span class="token function">print</span><span class="token punctuation">(</span>safehello<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"foo"</span></span> <span class="token comment">//如果未设置为foo</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>bar<span class="token operator">?</span><span class="token punctuation">.</span>z <span class="token comment">//只要有一个是nil 全是nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note10_Multithreading Demo Gestures</title>
    <url>/2022/05/19/cs193p-note10/</url>
    <content><![CDATA[<h3 id="设置图片背景"><a href="#设置图片背景" class="headerlink" title="设置图片背景"></a>设置图片背景</h3><p>接收url和image</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> found <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">loadObjects</span><span class="token punctuation">(</span>ofType<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>
           document<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>imageURL<span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token punctuation">&#123;</span>
           found <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">loadObjects</span><span class="token punctuation">(</span>ofType<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> image <span class="token keyword">in</span>
               <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">jpegData</span><span class="token punctuation">(</span>compressionQuality<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                   document<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">imageData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">&#125;</span><span class="token comment">//如果是jpg 无损压缩</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>更新背景图片，不能把backgroundImage变成计算属性，因为在缓慢地网络被获取需要几秒或许一分钟</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> emojiArt<span class="token punctuation">:</span> <span class="token class-name">EmojiArtModel</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> emojiArt<span class="token punctuation">.</span>background <span class="token operator">!=</span> oldValue<span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>
            <span class="token function">fetchBackgroundImageDataIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用try来解决抛出错误</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">fetchBackgroundImageDataIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    backgroundImage <span class="token operator">=</span> <span class="token nil constant">nil</span>
    <span class="token keyword">switch</span> emojiArt<span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token keyword">let</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">//获取url</span>
        <span class="token keyword">let</span> imageData <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token comment">//会阻塞UI</span>
        <span class="token keyword">if</span> imageData <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>
            backgroundImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> imageData<span class="token operator">!</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">imageData</span><span class="token punctuation">(</span><span class="token keyword">let</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>
        backgroundImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> image<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>blank<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是，url耗时很长，要使用多线程解决问题</p>
<ul>
<li>self:内部是一个闭包，被放入内存并且坚持到这件事完成运行，闭包是引用类型。通过self把闭包存入内存并指向viewmodel，被保存在堆中，即使关闭文档也无法退出</li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token punctuation">.</span>userInitiated<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> imageData <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token comment">//会阻塞UI</span>
    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>asunc<span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> imageData <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> imageData<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment">//不在后台线程中修改UI</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>弱引用:不强制self在堆中，没有其他人把它放入堆中就会消失，变成nil</li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>asunc<span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> 
    <span class="token keyword">if</span> imageData <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>
   		<span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> imageData<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token comment">//如果self为nil不进行语句操作</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果图片加载时间过长，用户可能会拖动别的图片进入，代码会被再次运行，等第一个图片加载完成时，可能会加载第一张图片。关于异步多线程编程，需要注意每当你从某事回来需要很长知识时，检查世界还是不是你离开时的亚子。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span>
	<span class="token keyword">if</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>emojiArt<span class="token punctuation">.</span>background <span class="token operator">==</span> <span class="token class-name">EmojiArtModel</span><span class="token punctuation">.</span><span class="token class-name">Background</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> imageData <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> imageData<span class="token operator">!</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>给用户正在加载的反馈</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> backgroundImageFetchStatus <span class="token operator">=</span> <span class="token class-name">BackgroundImageFetchStatus</span><span class="token punctuation">.</span>idle <span class="token comment">//监测加载状态</span>
<span class="token keyword">enum</span> <span class="token class-name">BackgroundImageFetchStatus</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> idle <span class="token comment">//闲置</span>
    <span class="token keyword">case</span> fetching <span class="token comment">//加载</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Gestures"><a href="#Gestures" class="headerlink" title="Gestures"></a>Gestures</h3><h4 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h4><ul>
<li><p>使用手势视图修改器让视图识别手势</p>
<p>  <code>myview.gesture(theGesture)</code>  手势协议</p>
</li>
<li><p>创建离散型手势</p>
<p>  通常只有一个func和var在我们的视图中，甚至只有一个局部变量</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> theGesture<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Gesture</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token class-name">TapGesture</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//双击手势</span>
    	<span class="token punctuation">.</span>onEnded<span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//放入需要实现的内容</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  通常离散型手势使用视图修饰符</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">myview<span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
myview<span class="token punctuation">.</span><span class="token function">onLongPressGesture</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>非离散型手势</p>
<p>  不仅需要处理手势被识别并且结束，还要监测在捏的全过程中的旋转、大小改变等。</p>
<p>  <code>DragGesture</code>, <code>MagnificationGesture</code> ,<code>RotationGesture</code> <code>longPressGesture</code>也可以看做非离散，按住是一直更新</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> theGesture<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Gesture</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
    	<span class="token punctuation">.</span>onEnded <span class="token punctuation">&#123;</span> value <span class="token keyword">in</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>  value值来源于当前监听手势</p>
<ul>
<li>DragGesture 拖动手势，一个结构体包含开始和结束位置</li>
<li>MagnificationGesture 放大捏合手势 手指放大了多少，多远</li>
<li>RotationGesture 旋转手势，角度</li>
</ul>
</li>
<li><p>非离散手势监听</p>
  <pre class="line-numbers language-none"><code class="language-none">@GestureState var myGestureState: MyGestureType &#x3D; &lt; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>  可以存储任何信息让视图自动更新，并在手势进行时重绘自身</p>
<p>  <strong>当手势结束时，var会回到初始值</strong></p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> theGesture<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Gesture</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">updating</span><span class="token punctuation">(</span>$myGestureState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> myGestureState<span class="token punctuation">,</span> transaction <span class="token keyword">in</span>
			myGestureState <span class="token operator">=</span> 
		<span class="token punctuation">&#125;</span>
		<span class="token punctuation">.</span><span class="token function">onEnded</span> <span class="token punctuation">(</span> value <span class="token keyword">in</span><span class="token punctuation">)</span><span class="token comment">//追踪结束时状态</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>.updating 当手指移动时被重复调用</li>
<li>$ 放在@GestureState变量前面，告诉系统使用哪个变量</li>
<li>value取决于哪个手势</li>
<li>myGestureState 一个输入输出参数，唯一方式修改GestureState的值，复制值类型，反悔的时候再复制回去</li>
<li>transaction 动画相关</li>
</ul>
  <pre class="line-numbers language-none"><code class="language-none">DragGesture(...)
	.onChanged &#123; value in 
		&#x2F;&#x2F;无法更新状态，只提供价值
	&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>  只能根据当前状态绘制图形，更新永久状态，手势结束之后不重置</p>
</li>
</ul>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><ul>
<li><p>设置双击调整背景适应屏幕</p>
<p>  设置双击手势效果</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token function">doubleTapToZoom</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> geometry<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">doubleTapToZoom</span><span class="token punctuation">(</span><span class="token keyword">in</span> size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">Gesture</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">TapGesture</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>onEnded <span class="token punctuation">&#123;</span>
        withAnimation <span class="token punctuation">&#123;</span>
            <span class="token function">zoomToFit</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>backgroundImage<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> size<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用捏手势进行缩放</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token function">zoomGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//缩放手势</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">zoomGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">Gesture</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">MagnificationGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//捏合手势</span>
		<span class="token punctuation">.</span><span class="token function">updating</span><span class="token punctuation">(</span>$gestureZoomScale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> latestGestureScale<span class="token punctuation">,</span> ourGestureStateInOut<span class="token punctuation">,</span> transaction <span class="token keyword">in</span><span class="token comment">//手指分开距离</span>
			ourGestureStateInOut <span class="token operator">=</span> latestGestureScale
		<span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span>onEnded <span class="token punctuation">&#123;</span> gestureScaleAtEnd <span class="token keyword">in</span> <span class="token comment">//是开始手指距离的几倍</span>
		steadyStateZoomScale <span class="token operator">*=</span> gestureScaleAtEnd
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>拖动背景</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">panGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">Gesture</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">updating</span><span class="token punctuation">(</span>$gesturePanOffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> latestDragGestureValue<span class="token punctuation">,</span> gesturePanOffset<span class="token punctuation">,</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>
            gesturePanOffset <span class="token operator">=</span> latestDragGestureValue<span class="token punctuation">.</span>translation <span class="token operator">/</span> zoomScale
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span>onEnded <span class="token punctuation">&#123;</span> finalDragGestureValue <span class="token keyword">in</span>
            steadyStatePanOffset <span class="token operator">=</span> steadyStatePanOffset <span class="token operator">+</span> <span class="token punctuation">(</span>finalDragGestureValue<span class="token punctuation">.</span>translation <span class="token operator">/</span> zoomScale<span class="token punctuation">)</span> <span class="token comment">//图片变大的时候,移动的距离小, translation 结束-开始</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>  组合两个不同手势</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token function">panGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">simultaneously</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token function">zoomGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//组合两个不同手势</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note11_Error Persistence</title>
    <url>/2022/06/02/cs193p-note11/</url>
    <content><![CDATA[<h3 id="Error-Handing"><a href="#Error-Handing" class="headerlink" title="Error Handing"></a>Error Handing</h3><h4 id="Throwing-errors"><a href="#Throwing-errors" class="headerlink" title="Throwing errors"></a>Throwing errors</h4><p>很多函数都有<code>throws</code>关键字，你可以抛出错误</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">attendLecture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> sleptIn <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token class-name">CS193pError</span><span class="token punctuation">.</span>missedLecture
    <span class="token punctuation">&#125;</span>
    <span class="token function">askQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果抛出错误，函数后续无法完成</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">enum</span> <span class="token class-name">CS193pError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token class-name">LateHomework</span><span class="token punctuation">(</span>daysLate<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> missedLecture
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>使用try调用能抛出错误的函数，<code>try head(from: url)</code></p>
<h4 id="不处理抛出错误"><a href="#不处理抛出错误" class="headerlink" title="不处理抛出错误"></a>不处理抛出错误</h4><ul>
<li><p>try? 忽略发生的任何错误，如果抛出错误只会返回nil</p>
</li>
<li><p>try! 如果遇到错误，使程序崩溃</p>
</li>
<li><p>try 仅适用于本身抛出的函数，如果错误被抛出会重新扔给调用foo的人</p>
  <pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">try</span> <span class="token function">somethingThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h4 id="处理抛出错误"><a href="#处理抛出错误" class="headerlink" title="处理抛出错误"></a>处理抛出错误</h4><p>使用do和catch包裹try</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token function">functionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可能会发生错误的内容</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hello"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> error <span class="token punctuation">&#123;</span>
    <span class="token comment">//捕获和处理错误</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token class-name">CS193pError</span><span class="token punctuation">.</span><span class="token function">lateHomeWork</span><span class="token punctuation">(</span><span class="token keyword">let</span> daysLate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//捕获相关错误，获取daysLate的值</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> cs193pError <span class="token keyword">where</span> cs193pError <span class="token keyword">is</span> <span class="token class-name">CS193pError</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//捕获所有CS193p错误</span>
<span class="token punctuation">&#125;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"keep going"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><p>很多种方式去永久的保存文件</p>
<ul>
<li>iOS有一个Unix文件系统，可以使用FileManager在系统中存取文件</li>
<li>可以存储在SQL数据库中，有一个完整框架 CoreData</li>
<li>iCloud 使用CloudKit将文件存入iCloud</li>
<li>UserDefaults 轻量级，存储用户偏好（调色板）</li>
</ul>
<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>和访问Unix文件系统一样，以&#x2F;开头。但是不能访问大部分内容，只能读写访问自己程序沙盒中目录（sandbox）沙盒，更加安全。在删除应用时，会将沙盒内容一起删除，不会有残留。</p>
<p>沙盒中目录：Application存放可执行文件、图片等，是个只读目录；Document存储用户保存的文件内容 ；Application Support需要存储在文件系统中，但用户不视为文件eg.调色盘；Caches 不会备份</p>
<h5 id="如何访问沙盒目录"><a href="#如何访问沙盒目录" class="headerlink" title="如何访问沙盒目录"></a>如何访问沙盒目录</h5><p>使用FileManager的URL来访问沙盒中的文件，通常使用共享的的FileManager.default，因为是线程安全的，所以适合在主队列中访问沙盒</p>
<p>获取特定目录的url</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> manager <span class="token operator">=</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span>
<span class="token keyword">let</span> url <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">urls</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>documentDirectory<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> userDomainMask<span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token comment">//返回复数，只选择第一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>访问文件系统时，总是开始于一个特定目录的url</p>
<p>url的函数，添加内容到指定url</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">appendingPathComponent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token constant">URL</span> <span class="token comment">//添加组件（文件）到self 返回url</span>
<span class="token keyword">func</span> <span class="token function-definition function">appendingPathExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token constant">URL</span> <span class="token comment">//添加扩展 .jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查找特定url中内容</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> isFileURL<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token comment">//指向文件</span>
<span class="token keyword">func</span> <span class="token function-definition function">resourceValues</span><span class="token punctuation">(</span><span class="token keyword">for</span> key<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLResourceKey</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">URLResourceKey</span><span class="token punctuation">:</span><span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token operator">?</span>
<span class="token comment">//.creationDataKey .isDirectoryKey .fileSizeKey</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以查找文件创建时间、大小等信息</p>
<h5 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h5><p>通过Data向文件系统中的文件写入实际内容，是数据结构，以byte的方式将数据读取写入。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Data</span> <span class="token keyword">init</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token class-name">ReadingOptions</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>
<span class="token comment">//根据url来获取数据二进制数据</span>
<span class="token keyword">func</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span>to url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token class-name">WritingOptions</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">Bool</span>
<span class="token comment">//options .atomic .withoutOverwriting</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="存档-Archiving"><a href="#存档-Archiving" class="headerlink" title="存档 Archiving"></a>存档 Archiving</h4><h5 id="Codable协议"><a href="#Codable协议" class="headerlink" title="Codable协议"></a>Codable协议</h5><p>符合Codable协议，可以变成一团放入文件系统。任何结构变量本身都可以编码，Swift可以自动实现，但是枚举有关联值的不能自动编码<strong>（Swift5.5好像可以了）</strong>，需要手动实现。</p>
<p>标记了协议后，将数据转换成blob的方法最常用的就是将其编码成某种文件格式(JSON)。互联网上的API获取大量使用数据都是JSON格式。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> object<span class="token punctuation">:</span> <span class="token class-name">MyType</span> <span class="token operator">=</span> <span class="token operator">...</span> <span class="token comment">//MyType要可编码</span>
<span class="token keyword">let</span> jsonData<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
<span class="token comment">//一个使用JSON表示的Data实例作为blob</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>编码有抛出，你能通过catch方便的找到错误。</p>
<p>JSON是一个文本格式，可以查看内容，把jsonData作为内容返回并通过string转换成字符串</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> jsonData<span class="token operator">!</span><span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以写入jsonData到文件和将JSON解码成数据类型</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">try</span> jsonData<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token comment">//throws</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> myObject<span class="token punctuation">:</span> <span class="token class-name">MyType</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">MyType</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> jsonData<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>关于解码的错误处理</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">MyType</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> jsonData<span class="token operator">!</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token class-name">DecodingError</span><span class="token punctuation">.</span><span class="token function">keyNotFound</span><span class="token punctuation">(</span><span class="token keyword">let</span> key<span class="token punctuation">,</span> <span class="token keyword">let</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"couldn't find key </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">key</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> in JSON: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">context<span class="token punctuation">.</span>debugDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token class-name">DecodingError</span><span class="token punctuation">.</span><span class="token function">valueNotFound</span><span class="token punctuation">(</span><span class="token keyword">let</span> type<span class="token punctuation">,</span> <span class="token keyword">let</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token class-name">DecodingError</span><span class="token punctuation">.</span><span class="token function">typeMismatch</span><span class="token punctuation">(</span><span class="token keyword">let</span> type<span class="token punctuation">,</span> <span class="token keyword">let</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token class-name">DecodingError</span><span class="token punctuation">.</span><span class="token function">dataCorrupted</span><span class="token punctuation">(</span><span class="token keyword">let</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MyType</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> someData<span class="token punctuation">:</span> <span class="token class-name">Date</span>
    <span class="token keyword">var</span> someString<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">var</span> other<span class="token punctuation">:</span> <span class="token class-name">SomeOtherType</span>
    <span class="token comment">//修改JSON的冒号左面的内容，在JSON中key使用的都是小写字母，单词间使用下划线分割</span>
    <span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CodingKey</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> someData <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"some_date"</span></span>
        <span class="token keyword">case</span> other
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">init</span><span class="token punctuation">(</span>from decoder<span class="token punctuation">:</span> <span class="token class-name">Decoder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span> <span class="token comment">//解码</span>
        <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
        <span class="token comment">//抓住容器</span>
        someDate <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>someDate<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//编码</span>
    <span class="token keyword">func</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span>to encoder<span class="token punctuation">:</span> <span class="token class-name">Encoder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> container <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>someDate<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>someDate<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h4><p>用户默认值 是个强大的系统，有的时候会和文件系统结合起来。对于轻量级数据、用户偏好内容的存储。</p>
<h5 id="Property-List"><a href="#Property-List" class="headerlink" title="Property List"></a>Property List</h5><p>UserDefaults只能在属性列表(Property List)中存储内容，列表属性不是协议或者结构体等，是个概念，只能由字符串、正数、布尔值、浮点数、日期、数据、数组或者字典组成。如果还有别的类型的内容，就不再视为属性列表，不能放进UserDefaults中。</p>
<p>我们可以把任何可编码的内容放进Data。</p>
<h5 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h5><p>Any是无类型。Swift是一个强类型语言，这个很反Swift，但是我们会尽量忽略Any。</p>
<h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><p>使用时，首先需要一个UserDefaults的实例</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard
<span class="token comment">//存储内容</span>
defaults<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> forKeys<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"SomeKey"</span></span><span class="token punctuation">)</span> <span class="token comment">//object必须是Property List</span>
<span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">31.1</span><span class="token punctuation">,</span> forKeys<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token comment">// 可以保证存储的是double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>获取数据</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> defaults<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span>forKeys<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"MyInteger"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果返回的类型是一个数组，将会返回<code>Array&lt;Any&gt;</code>，因为Swift不能直接对Any处理，所以要把Array使用as转换成能处理的内容。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="使文档持久化"><a href="#使文档持久化" class="headerlink" title="使文档持久化"></a>使文档持久化</h4><p>一般不在View中做持久化，大多数在ViewModel中进行持久化。也有可能在Model中，甚至做一个持久化引擎类似SQL数据库等。</p>
<p>在viewmodel中添加save函数，函数中先得到一些数据，然后获取数据并写入到url中。需要知道将在Data中内容的类型，以JSON的格式数据化。所以我们需要把EmojiArtModel转换成JSON表示，并以某种方式放进data中，然后写到url。</p>
<p>在Model中添加将自己转换成JSON的函数</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"> <span class="token comment">//保存文件,url为文件url,在本地系统中的某个位置</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span>to url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">let</span> thisfunction <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token literal constant">#function</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span> <span class="token comment">// EmojiArtDocument.save(to:)</span>
    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> data<span class="token punctuation">:</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token keyword">try</span> emojiArt<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">thisfunction</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> json = </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"nil"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token comment">//如果是图象等 为nil</span>
        <span class="token keyword">try</span> data<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> url<span class="token punctuation">)</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">thisfunction</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> success!"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token keyword">let</span> encodingError <span class="token keyword">where</span> encodingError <span class="token keyword">is</span> <span class="token class-name">EncodingError</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">thisfunction</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> coundn't encode EmojiArt as JSON because </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">encodingError<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token comment">//本地化当地语言</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">thisfunction</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> error = </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="实现自动保存文件"><a href="#实现自动保存文件" class="headerlink" title="实现自动保存文件"></a>实现自动保存文件</h6><p>获取文件目录时，在iOS中in参数的内容永远是.userDomainMask</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">struct</span>  <span class="token class-name">Autosave</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Autosaved.emojiart"</span></span> <span class="token comment">//后期做成扩展名,现在只是文件名</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//在iOS中 始终是.userDomainMask</span>
        <span class="token keyword">let</span> documentDirectory <span class="token operator">=</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">urls</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>documentDirectory<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>userDomainMask<span class="token punctuation">)</span><span class="token punctuation">.</span>first 
        <span class="token comment">//在得到的url中添加组件</span>
        <span class="token keyword">return</span> documentDirectory<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">autosave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Autosave</span><span class="token punctuation">.</span>url <span class="token punctuation">&#123;</span>
        <span class="token function">save</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> url<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>自动保存的频率太过频繁，优化自动保存函数，改为不操作一段时间后自动保存</p>
<p>使用self，如果安排保存时不小心关闭界面，在内存中保留self，直到有机会自动保存</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">scheduleAutosave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    autosaveTimer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//取消前一个Timer</span>
	autosaveTimer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>withTimeInterval<span class="token punctuation">:</span> <span class="token class-name">Autosave</span><span class="token punctuation">.</span>coalescingInterval<span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> timer <span class="token keyword">in</span>
		<span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">autosave</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>self</p>
<blockquote>
<p>带有关联值的枚举内，自定义编码 Swift5.5能自动编码了，不需要手动进行，但是把代码摆上吧</p>
</blockquote>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//自定义编码...</span>
<span class="token keyword">init</span><span class="token punctuation">(</span>from decoder<span class="token punctuation">:</span> <span class="token class-name">Decoder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> imageData <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>imageData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">imageData</span><span class="token punctuation">(</span>imageData<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span>blank
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span>to encoder<span class="token punctuation">:</span> <span class="token class-name">Encoder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> container <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token keyword">let</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">imageData</span><span class="token punctuation">(</span><span class="token keyword">let</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>imageData<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">.</span>blank<span class="token punctuation">:</span> <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">enum</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CodingKey</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"theURL"</span></span>
    <span class="token keyword">case</span> imageData
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="加载自动保存的文件"><a href="#加载自动保存的文件" class="headerlink" title="加载自动保存的文件"></a>加载自动保存的文件</h6><p>对model进行初始化</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token comment">//初始化Data,通过文件地址获取文件内Data</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">EmojiArtModel</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">init</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">EmojiArtModel</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> json<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在viewmodel中，进行初始化</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Autosave</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">let</span> autosavedEmojiArt <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">EmojiArtModel</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        emojiArt <span class="token operator">=</span> autosavedEmojiArt
        <span class="token function">fetchBackgroundImageDataIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        emojiArt <span class="token operator">=</span> <span class="token class-name">EmojiArtModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="调色板的独立MVVM"><a href="#调色板的独立MVVM" class="headerlink" title="调色板的独立MVVM"></a>调色板的独立MVVM</h4><p>创建调色板ViewModel</p>
<p>重新加载调色板，转化成字符串数组使用UserDefaults</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//使用UserDefault存储调色板内容</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">storeInUserDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>palettes<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>emojis<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> userDefaultsKey<span class="token punctuation">)</span> <span class="token comment">// 必须是属性列表内容</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">restoreFromUserDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> palettesAsPropertyList <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> userDefaultsKey<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token comment">//变成字符串数组,如果不行则为空</span>
        <span class="token keyword">for</span> paletteAsArray <span class="token keyword">in</span> palettesAsPropertyList <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> paletteAsArray<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>paletteAsArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">!</span>palettes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">let</span> palette <span class="token operator">=</span> <span class="token class-name">Palette</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> paletteAsArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> emojis<span class="token punctuation">:</span> paletteAsArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> id<span class="token punctuation">)</span>
                palettes<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是太麻烦了，所以使用数据进行存储更方便</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>palettes<span class="token punctuation">)</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> userDefaultsKey<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> userDefaultsKey<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">let</span> decodedPalettes <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Palette</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> jsonData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	palettes <span class="token operator">=</span> decodedPalettes
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note12_Bindings Sheet Navigation EditMode</title>
    <url>/2022/06/05/cs193p-note12/</url>
    <content><![CDATA[<h3 id="Property-Wrappers"><a href="#Property-Wrappers" class="headerlink" title="Property Wrappers"></a>Property Wrappers</h3><p>属性包装器，含有@something的语句。属性包装器只是一个结构，结构中封装了应用于变量的某种模板行为。例如@State、@Published、@ObservedObject等</p>
<h4 id="Published"><a href="#Published" class="headerlink" title="Published"></a>Published</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> emojiArt<span class="token punctuation">:</span> <span class="token class-name">EmojiArt</span> <span class="token operator">=</span> <span class="token class-name">EmojiArt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//具体实现</span>
<span class="token keyword">struct</span> <span class="token class-name">Published</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建一个结构体</span>
    <span class="token keyword">var</span> wrappedValue<span class="token punctuation">:</span> <span class="token class-name">EmojiArt</span>
    <span class="token comment">//发生变化时，在信息流中发布变化</span>
    <span class="token keyword">var</span> projectedValue<span class="token punctuation">:</span> <span class="token class-name">Publisher</span><span class="token operator">&lt;</span><span class="token class-name">EmojiArt</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token comment">//可以访问使用$emojiArt获取投影值</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//还提供了其他变量,任何@的内容都可以制作下划线变量</span>
<span class="token keyword">var</span> _emojiArt<span class="token punctuation">:</span> <span class="token class-name">Published</span> <span class="token operator">=</span> <span class="token class-name">Published</span><span class="token punctuation">(</span>wrappedValue<span class="token punctuation">:</span> <span class="token class-name">EmojiArt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//数据类型是已发布类型</span>
<span class="token comment">//包装之后，变成计算属性</span>
<span class="token keyword">var</span> emojiArt<span class="token punctuation">:</span> <span class="token class-name">EmojiArt</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> _emojiArt<span class="token punctuation">.</span>wrappedValue <span class="token punctuation">&#125;</span>
    <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> _emojiArt<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> newvalue <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>当wrappedValue发生变化时，通过projectedValue($emojiArt)发布更改。有代码在封闭的ObservableObject中调用<code>objectWillChange.send()</code></p>
<h4 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h4><p>wrappedValue类型是任何值类型。在堆中存储wrappedValue，当值发生变化时使视图无效，重建body。随着视图的创建和销毁，只要视图主体在屏幕上，值保持不变一直指向堆中的同一个东西。</p>
<p>projected value $ 是一个Binding 绑定，这个值在堆中的绑定。</p>
<p>如果使用<code>@State</code>声明，但并没有赋值，想要在init中初始化。_是State结构，通过<code>.init</code>实现，使其有初始值。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> foo<span class="token punctuation">:</span> <span class="token class-name">Int</span>
<span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	_foo <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="StateObject"><a href="#StateObject" class="headerlink" title="@StateObject"></a>@StateObject</h4><p>和@State很相似，将数据保存在内存中，但是它用用于ObservableObjects（ViewModel）。视图和验证等行为类似于@ObservedObject。用在Apps、View、Scenes中。</p>
<p>@StateObject是一个数据的真实的来源，就像state对于view本地的值一样。所有需要带有初始化值的方式创建<code>@StateObject var foo = SomeObservableObject()</code>。@ObservedObject不是真实来源，是对真实来源的引用，所以后面不会跟上“&#x3D;”。ObservedObject可以存在于StateObject中，可以拥有一个ViewModel数组，viewmodel会被固定到view的声明周期。</p>
<p>如果把StateObject放进视图中，生命周期和屏幕上视图的生命周期一致，一旦视图离开屏幕ViewModel会被破坏，所有的存储都会消失。如果你有一个接受url的viewmodel，去拿去内容，一旦离开屏幕就销毁拿来的内容。</p>
<h4 id="StateObject-和-ObservedObject"><a href="#StateObject-和-ObservedObject" class="headerlink" title="@StateObject 和 @ObservedObject"></a>@StateObject 和 @ObservedObject</h4><p>wrappedValue是实现ObservableObject协议的东西，基本上是ViewModel。当wrappedValue发生改变时，使试图失效。ProjectValue的值是一个对ViewModel中变量的Binding，这个投影值可以是任何变量的表达式，甚至做下标 <code>$myViewModel.data.stuff[3]</code>。</p>
<h4 id="Binding"><a href="#Binding" class="headerlink" title="@Binding"></a>@Binding</h4><p>wrappedValue是绑定到别的东西的值，内容来源主要是@State、@StateObject、@ObservedObject。当绑定内容改变时，使视图无效。ProjectedValue是一个绑定到自己的Binding，如果绑定某物并调用接受另一个绑定的函数，可以使用。作用是上级视图传递到子视图的数据可修改版本。</p>
<p>从TextField中获取文本，使用Toggle或其他状态修改UI元素，查找NavigationView中哪个项目被选中，手势状态中的 .updating……</p>
<p>Binding能让我们拥有单一的真实来源，拥有不需要复制状态，或将其复制到View，能使用@Binding到数据的真实来源。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MyView</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">&#123;</span>
    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> myString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Hello"</span></span> <span class="token comment">//来源</span>
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token function">otherView</span><span class="token punctuation">(</span>sharedText<span class="token punctuation">:</span> $myString<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">struct</span> <span class="token class-name">OtherView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> sharedText<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token comment">//绑定 </span>
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Text</span><span class="token punctuation">(</span>sharedText<span class="token punctuation">)</span>
        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Shared"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $sharedText<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>常量绑定，绑定一个常量每次询问时都不会改变。预览时常用<code>Binding.constant(value)</code>。<code>OtherView(sharedText: .constant(&quot;Howdy&quot;))</code>。计算绑定<code>Binding(get:, set:)</code> </p>
<h4 id="EnvironmentObject"><a href="#EnvironmentObject" class="headerlink" title="@EnvironmentObject"></a>@EnvironmentObject</h4><p>和@ObservedObject完全相同，是ObservedObject的引用，以不同的方式传递给视图，不是通过参数传递，通过视图修改器传递。如果我们的整个View层次结构中的所有视图都需要使用这个数据，就需要通过EnvironmentObject来传递。这样我们就可以省略到各种视图的参数了(偷懒专用代码)。所以我们可以把EnvironmentObject认为是将数据注入到所有的视图中去。只能拥有一个@EnvironmentObject。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> myView <span class="token operator">=</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>theViewModel<span class="token punctuation">)</span> <span class="token comment">//传递数据</span>
<span class="token attribute atrule">@EnvironmentObject</span> <span class="token keyword">var</span> viewModel<span class="token punctuation">:</span> <span class="token class-name">ViewModelClass</span> <span class="token comment">//接受数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>wrappedValue是ObservableObject获得通过.environmentObject()被注入到视图</p>
<h4 id="Environment"><a href="#Environment" class="headerlink" title="@Environment"></a>@Environment</h4><p>和@EnvironmentObject没关系。属性包装器在创建时可以有参数，使用()指定参数<code>@Environment(\.colorScheme) var colorScheme</code>。内容是当视图正在绘制的时候，一堆正在发生的事情的变量。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">view<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">,</span> <span class="token punctuation">.</span>dark<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>wrappedValue是EnvironmentValues中的一些变量。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="从模型中提取信息"><a href="#从模型中提取信息" class="headerlink" title="从模型中提取信息"></a>从模型中提取信息</h4><p>将store设置成EnvironmentObject，方便注入到所有视图。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PaletteChooser</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> emojiFontSize<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">40</span>
    <span class="token keyword">var</span> emojiFont<span class="token punctuation">:</span> <span class="token class-name">Font</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> emojiFontSize<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
    
    <span class="token attribute atrule">@EnvironmentObject</span> <span class="token keyword">var</span> store<span class="token punctuation">:</span> <span class="token class-name">PaletteStore</span> <span class="token comment">//数据源在app</span>
    
    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> chosenPaletteIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//选择的调色板下标</span>
    
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>
            paletteControlButton
            <span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> store<span class="token punctuation">.</span><span class="token function">palette</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> chosenPaletteIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> paletteControlButton<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>
            chosenPaletteIndex <span class="token operator">=</span> <span class="token punctuation">(</span>chosenPaletteIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> store<span class="token punctuation">.</span>palettes<span class="token punctuation">.</span>count
        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"paintpalette"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>emojiFont<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span><span class="token keyword">for</span> palette<span class="token punctuation">:</span> <span class="token class-name">Palette</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span>palette<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
            <span class="token class-name">ScrollingEmojisView</span><span class="token punctuation">(</span>emojis<span class="token punctuation">:</span> palette<span class="token punctuation">.</span>emojis<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>emojiFont<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="添加调色板的动画"><a href="#添加调色板的动画" class="headerlink" title="添加调色板的动画"></a>添加调色板的动画</h4><p>点击调色板按钮时，平滑滚动切换调色板，新内容从底部往上滑动，就内容向上滑行到顶部离开，使用过渡动画。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span><span class="token keyword">for</span> palette<span class="token punctuation">:</span> <span class="token class-name">Palette</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>palette<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token comment">//类似于变成可是别的,发生变化的时候,删除旧的创建新的代替</span>
    <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span>rollTransition<span class="token punctuation">)</span> <span class="token comment">//不能实现,只是改变了试图并没有在过渡</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//过渡动画</span>
<span class="token keyword">var</span> rollTransition<span class="token punctuation">:</span> <span class="token class-name">AnyTransition</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">AnyTransition</span><span class="token punctuation">.</span><span class="token function">asymmetric</span><span class="token punctuation">(</span>insertion<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> emojiFontSize<span class="token punctuation">)</span><span class="token punctuation">,</span> removal<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">-</span>emojiFontSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 不对称过渡</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Button</span><span class="token punctuation">.</span>contextMenu <span class="token punctuation">&#123;</span> contextMenu <span class="token punctuation">&#125;</span> <span class="token comment">//上下文菜单栏,只需要列出要放下的按钮</span>
<span class="token attribute atrule">@ViewBuilder</span>
<span class="token keyword">var</span> contextMenu<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">AnimatedActionButton</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"New"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        store<span class="token punctuation">.</span><span class="token function">insertPalette</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"New"</span></span><span class="token punctuation">,</span> emojis<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> chosenPaletteIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">AnimatedActionButton</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"minus.circle"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        chosenPaletteIndex <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">removePalette</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> chosenPaletteIndex<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="go-to"><a href="#go-to" class="headerlink" title="go to"></a>go to</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> gotoMenu<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Menu</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>palettes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> palette <span class="token keyword">in</span>
            <span class="token class-name">AnimatedActionButton</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> palette<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> store<span class="token punctuation">.</span>palettes<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>matching<span class="token punctuation">:</span> palette<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    chosenPaletteIndex <span class="token operator">=</span> index
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Go To"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"text.insert"</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="创建新的编辑视图"><a href="#创建新的编辑视图" class="headerlink" title="创建新的编辑视图"></a>创建新的编辑视图</h4><p>使编辑窗口出现在页面上</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">popover</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $editing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//给定条件为真时显示弹出框 .sheet</span>
	<span class="token class-name">PaletteEditor</span><span class="token punctuation">(</span>palette<span class="token punctuation">:</span> $store<span class="token punctuation">.</span>palettes<span class="token punctuation">[</span>chosenPaletteIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//由实际要改变的调色板驱动</span>
body<span class="token punctuation">.</span><span class="token function">popover</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> $paletteToEdit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> palette <span class="token keyword">in</span> <span class="token comment">//nil不出现在屏幕上</span>
	<span class="token class-name">PaletteEditor</span><span class="token punctuation">(</span>palette<span class="token punctuation">:</span> $store<span class="token punctuation">.</span>palettes<span class="token punctuation">[</span>palette<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//用调色板索引</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>TextField 输入文本框 还有自动大小写，禁止自动更正，转义城市地址等功能</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PaletteEditor</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> palette<span class="token punctuation">:</span> <span class="token class-name">Palette</span> <span class="token comment">//编辑位于其他地方的调色板   </span>
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//正式部分</span>
<span class="token comment">//            Section(header: Text("N")) &#123;</span>
<span class="token comment">//                TextField("Name", text: $palette.name)</span>
<span class="token comment">//            &#125;</span>
            nameSection
            addEmojiSection
            removeEmojiSection
            
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>minWidth<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> minHeight<span class="token punctuation">:</span> <span class="token number">350</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> nameSection<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Section</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $palette<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> emojiToAdd <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>
    <span class="token keyword">var</span> addEmojiSection<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Section</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $emojiToAdd<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> emojiToAdd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> emojis <span class="token keyword">in</span>   <span class="token comment">//值发生改变时操作</span>
                    <span class="token function">addEmojis</span><span class="token punctuation">(</span>emojis<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Add Emojis"</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">addEmojis</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> emojis<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        withAnimation <span class="token punctuation">&#123;</span>
            palette<span class="token punctuation">.</span>emojis <span class="token operator">=</span> <span class="token punctuation">(</span>emojis <span class="token operator">+</span> palette<span class="token punctuation">.</span>emojis<span class="token punctuation">)</span>
                <span class="token punctuation">.</span>filter <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>isEmoji <span class="token punctuation">&#125;</span> <span class="token comment">//过滤不是表情符号的内容</span>
                <span class="token punctuation">.</span>removingDuplicateCharacters <span class="token comment">//如果存在不想复制</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> removeEmojiSection<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Section</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> emojis <span class="token operator">=</span> palette<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span>removingDuplicateCharacters<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
            <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>emojis<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> emoji <span class="token keyword">in</span>
                    <span class="token class-name">Text</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>
                            withAnimation <span class="token punctuation">&#123;</span>
                                palette<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span> <span class="token operator">==</span> emoji <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Remove Emoji"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PaletteManager</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token attribute atrule">@EnvironmentObject</span> <span class="token keyword">var</span> store<span class="token punctuation">:</span> <span class="token class-name">PaletteStore</span>
    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>palettes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> palette <span class="token keyword">in</span>
                    <span class="token comment">//点击之后跳转目的地 导航链接</span>
                    <span class="token comment">//必需在NavifationView中使用</span>
                    <span class="token comment">//顶部有更多空间,为了放置标题</span>
                    <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token class-name">PaletteEditor</span><span class="token punctuation">(</span>palette<span class="token punctuation">:</span> $store<span class="token punctuation">.</span>palettes<span class="token punctuation">[</span>palette<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//内部的标题在editor修改</span>
                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token class-name">Text</span><span class="token punctuation">(</span>palette<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
                            <span class="token class-name">Text</span><span class="token punctuation">(</span>palette<span class="token punctuation">.</span>emojis<span class="token punctuation">)</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Manager Palettes"</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">navigationBarTitleDisplayMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">struct</span> <span class="token class-name">PaletteManager_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">PaletteManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span><span class="token class-name">PaletteStore</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"preview"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="删除管理列表"><a href="#删除管理列表" class="headerlink" title="删除管理列表"></a>删除管理列表</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span>onDelete <span class="token punctuation">&#123;</span> indexSet <span class="token keyword">in</span> <span class="token comment">//数组索引</span>
    store<span class="token punctuation">.</span>palettes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>atOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">)</span> <span class="token comment">//删除指定偏移量的所有元素</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span>onMove <span class="token punctuation">&#123;</span> indexSet<span class="token punctuation">,</span> newOffset <span class="token keyword">in</span>
    store<span class="token punctuation">.</span>palettes<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>fromOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">,</span> toOffset<span class="token punctuation">:</span> newOffset<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>提醒用户出现问题</p>
<pre class="line-numbers language-none"><code class="language-none">@State private var alertToShow: IdentifiableAlert?

private func showBackgroundImageFetchFailedAlert(_ url: URL) &#123;
    alertToShow &#x3D; IdentifiableAlert(id: &quot;fetch failed: &quot; + url.absoluteString, alert: &#123;
        Alert(
            title: Text(&quot;Background Image Fetch&quot;),
            message: Text(&quot;Couldn&#39;t load from \(url).&quot;),
            dismissButton: .default(Text(&quot;OK&quot;))
        )
    &#125;)
&#125;

&#x2F;&#x2F;好像现在最好不用,但是还没改
&#x2F;&#x2F;放在文件主体
.alert(item: $alertToShow) &#123; alertToShow in
    alertToShow.alert()
&#125;
.onChange(of: document.backgroundImageFetchStatus) &#123; status in
    switch status &#123;
    case .failed(let url):
        showBackgroundImageFetchFailedAlert(url)
    default:
        break
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习了使用EnvironmentObject机制传递ViewModel，对执行过渡时使用id让视图可识别实现过渡，在按钮上制作菜单，使用Binding从视图一直返回到模型、决定视图什么时候出现，Form、List、在ForEach中的onDelete和onMove，放置工具栏，EditButton()会设置EditMode，警告</p>
]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note13_Published More Persistence</title>
    <url>/2022/06/09/cs193p-note13/</url>
    <content><![CDATA[<h3 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h3><p>协议。实现发出值的对象。</p>
<p><code>Publisher&lt;Output, Failure&gt;</code>，Output是发布者发布的内容的类型，Failure通常是一个枚举，必须实现Error，失败后不会抛出。对于发布者，我们可以订阅它、即时转换它的值、把值传送到一些地方。属于Combine框架（可能会后补详细内容）</p>
<span id="more"></span>

<h4 id="订阅发布者"><a href="#订阅发布者" class="headerlink" title="订阅发布者"></a>订阅发布者</h4><p>当发布没有订阅者，会停止发布</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">cancellable <span class="token operator">=</span> myPublisher<span class="token punctuation">.</span><span class="token function">sink</span><span class="token punctuation">(</span>
	receiveCompletion<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> result <span class="token keyword">in</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>	<span class="token comment">//完成、失败或其他方式</span>
	receiveValue<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> thingThePublisherPublishes <span class="token keyword">in</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> <span class="token comment">//随着发布者发布信息被反复调用，获得发布的最新内容</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果调用.sink，发布者是Never，可以忽略 receiveCompletion。</p>
<p>返回的内容实现了可取消协议 Cancellable，通常使用类型擦出将它处理成AnyCancellable。不需要发布内容时可以使用<code>.cancel()</code>取消，还可以让.sink()订阅者保持活力。当返回cancellable值时.sink将在内存常跓，这是因为.sink指向了cancellable变量。</p>
<p>当把cancellable设置为nil时它将不会指向.sink返回的任何内容。这也会导致.sink停止工作（内存回收），所以它的生命周期是绑定在一起的。就像@State与视图的关系，是相互依赖的。如果我们希望.sink继续订阅，就需要一直使用一个变量来接收.sink的返回值。</p>
<p>.assign()内容类似，但需要失败类型为Never</p>
<h4 id="视图监听发布内容"><a href="#视图监听发布内容" class="headerlink" title="视图监听发布内容"></a>视图监听发布内容</h4><p>通过视图修改器onReceive，订阅发布内容</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> thingThePublisherPublishes <span class="token keyword">in</span> <span class="token comment">//每次发布的值</span>
    <span class="token comment">//发布时执行的闭包</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>会使视图重建，但更多的时候使用onChange</p>
<h4 id="获取发布者"><a href="#获取发布者" class="headerlink" title="获取发布者"></a>获取发布者</h4><p>上面说到的发布者是由Combine框架提供的，这里的<strong>Foundation</strong>发布商（也可以叫<strong>Foundation</strong>发布者），是由<strong>Foundation</strong>框架提供。</p>
<ul>
<li>在@Published变量前面使用$</li>
<li>多线程获取背景图片使用原始的GCD，但在URLSession，提供dataTaskPublisher发布最终来自互联网上的数据</li>
<li>Timer类有一个publish(every:)的函数，每秒或几秒发布一次，发布当前日期和时间的发布者</li>
<li>NotificationCenter通知中心发布器，系统给用户和发布通知</li>
</ul>
<h3 id="More-Pesistence"><a href="#More-Pesistence" class="headerlink" title="More Pesistence"></a>More Pesistence</h3><h4 id="Cloud-Kit"><a href="#Cloud-Kit" class="headerlink" title="Cloud Kit"></a>Cloud Kit</h4><p>在云数据库存储内容，数据会出现在用户的全部设备中。包含一种网络上的UserDefaults，在CoreData上表现的很好。任何使用网络的内容都是异步执行的。</p>
<h4 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h4><p>是一个面向对象的层，基本上位于关系数据库之上。为数据库中所有的行和表都创建了小的ViewModel。</p>
<p>具体内容在去年，我会补上的。（又一个坑）</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="使用URLSession"><a href="#使用URLSession" class="headerlink" title="使用URLSession"></a>使用URLSession</h4><p>用URLSession替换掉原本使用GCD获取背景图片的代码</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">backgroundImageFetchStatus <span class="token operator">=</span> <span class="token punctuation">.</span>fetching
backgroundImageFetchCancellable<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果来新的,马上取消旧的</span>
<span class="token keyword">let</span> session <span class="token operator">=</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared <span class="token comment">//使用shared初始化url请求器</span>
<span class="token comment">//Publisher在后台线程执行,UI要在主线程解决</span>
<span class="token comment">//Output是一个元组,data查找url返回的数据,response会共享请求时的一些数据</span>
<span class="token keyword">let</span> publisher <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">dataTaskPublisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token comment">//使用映射将数据转换成UIImage</span>
    <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> urlResponse<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token function">replaceError</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>    <span class="token comment">//出现错误时,不报告错误,将值替换成nil</span>
    <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span> <span class="token comment">//发布给主队列的订阅者,所以后面的.sink发生在主队列</span>
<span class="token comment">//完成获取时处理图象,并将照片发布</span>
<span class="token comment">//关闭文档自动停止</span>
backgroundImageFetchCancellable <span class="token operator">=</span> publisher <span class="token comment">//随时使用cancellable.cancel()取消订阅,离开函数也会局部变量消失也会结束</span>
    <span class="token comment">//.assign(to: \EmojiArtDocument.backgroundImage, on: self) //发布的失败类型为Never</span>
    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> image <span class="token keyword">in</span>
        <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> image
        <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>backgroundImageFetchStatus <span class="token operator">=</span> <span class="token punctuation">(</span>image <span class="token operator">!=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">.</span>idle <span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="视图自适应大小"><a href="#视图自适应大小" class="headerlink" title="视图自适应大小"></a>视图自适应大小</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>$backgroundImage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> image <span class="token keyword">in</span> <span class="token comment">//$document.backgroundImage是绑定值,不是发布者</span>
    <span class="token function">zoomToFit</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> geometry<span class="token punctuation">.</span>size <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193p_note5 Properties Layout @ViewBuilder</title>
    <url>/2022/02/28/cs193p-note5/</url>
    <content><![CDATA[<h3 id="Computed-Properties-计算属性"><a href="#Computed-Properties-计算属性" class="headerlink" title="Computed Properties 计算属性"></a>Computed Properties 计算属性</h3><p>不提供存储值，提供读取器和设置器，接收和设置其他属性</p>
<p>get用来接收数据，并且返回值，set用来设置其他属性或值</p>
<h3 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h3><p>变化会在必要时重新绘制，相当于@ObservedObject</p>
<span id="more"></span>

<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>屏幕的空间如何分配给所有视图</p>
<ol>
<li>视图容器为其中的视图提供空间</li>
<li>视图根据提供给他们的空间选择自己的尺寸，不是被分配</li>
<li>一旦视图调整了自己的大小，将视图放置在视图容器里</li>
<li>视图容器选择大小，基于里面的视图</li>
</ol>
<h4 id="HStack-amp-VStack"><a href="#HStack-amp-VStack" class="headerlink" title="HStack &amp; VStack"></a>HStack &amp; VStack</h4><p>最不灵活的视图</p>
<p>例如，Image和Text有固定大小，Image的自然大小，Text将字符串放进去，不灵活；RoundedRectangle非常灵活，如果你给他空间，他会占据全部空间，填满。</p>
<p>从最不灵活的视图先分配，text如果空间不够会自动省略，如果stack里面的视图非常灵活，那么本身就会变灵活</p>
<ul>
<li><p><code>Spacer(miniLength: CGFloat)</code>非常灵活，需要尽可能多的空间</p>
</li>
<li><p><code>Divide()</code> 画一条线分割视图</p>
</li>
<li><p><code>.layoutPriority()</code> 先获得视图的分配，默认是0</p>
</li>
</ul>
<p>Vstack生成一列视图，默认居中     </p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> <span class="token comment">//.leading .trailing</span>
<span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>firstTextBaseline<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//文本基线</span>
<span class="token comment">//定义自己的排列方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-swiftUI" data-language="swiftUI"><code class="language-swiftUI">Hstack &#123;
	ForEach(viewModel.cards)&#123; card in
		CardView(card: card).aspectRatio(2&#x2F;3, contentMode: .fit)
	&#125;
&#125;
.foregroundColor(Color.orange)
.padding(10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="LazyHStack-amp-LazyVStack"><a href="#LazyHStack-amp-LazyVStack" class="headerlink" title="LazyHStack &amp; LazyVStack"></a>LazyHStack &amp; LazyVStack</h4><ul>
<li><p>不构建不在屏幕上显示的视图，只构建ScrollView中显示在屏幕上的</p>
</li>
<li><p>不灵活，如果有灵活视图，不能给所有空间，会尽可能的小</p>
</li>
</ul>
<h4 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h4><p>接收任何视图在其中滚动</p>
<h4 id="LazyHGrid-amp-LazyVGrid"><a href="#LazyHGrid-amp-LazyVGrid" class="headerlink" title="LazyHGrid &amp; LazyVGrid"></a>LazyHGrid &amp; LazyVGrid</h4><p>控制多少列或者多少行</p>
<h4 id="ZStack"><a href="#ZStack" class="headerlink" title="ZStack"></a>ZStack</h4><p>调整自己的大小合适子项</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hello"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//背景大小取决于文字，不是灵活的尺寸</span>
<span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hello"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>
<span class="token comment">//文字不重要，很灵活</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Hstack</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>viewmodel<span class="token punctuation">.</span>cards<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> card <span class="token keyword">in</span>
    	<span class="token class-name">CardView</span><span class="token punctuation">(</span>card<span class="token punctuation">:</span> card<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>首先提供padding的空间，容器最外层的空间，将空间-10后提供给foregroundColor</li>
<li>foregroundColor提供相同的空间给Hstack</li>
<li>Hstack将空间平均分给aspectRatio</li>
<li>提供空间给CardView</li>
</ol>
<h4 id="GeometryReader"><a href="#GeometryReader" class="headerlink" title="GeometryReader"></a>GeometryReader</h4><p>本身总是适应提供的空间</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">GeometryReader</span><span class="token punctuation">&#123;</span> geometry <span class="token keyword">in</span> 
		<span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token comment">//放在视图里 计算视图大小</span>
<span class="token keyword">struct</span> <span class="token class-name">GrometryProxy</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token comment">//提供视图大小</span>
    <span class="token keyword">func</span> <span class="token function-definition function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">CoordinateSpace</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGRect</span>
    <span class="token keyword">var</span> safeAreaInsets<span class="token punctuation">:</span> <span class="token class-name">EdgeInsets</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">edgesIgnoringSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//画入安全区域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ViewBuilder"><a href="#ViewBuilder" class="headerlink" title="@ViewBuilder"></a>@ViewBuilder</h3><p>将函数返回成很对个视图组成的一个视图，创建的视图被称为TupleView</p>
<p>任意<code>func</code>或<code>只读的计算属性</code>都可以标识为<code>@ViewBuilder</code>，一旦标识，它里面的内容将会被解析为<code>a list of Views</code></p>
<h3 id="零散的东西"><a href="#零散的东西" class="headerlink" title="零散的东西"></a>零散的东西</h3><p>函数式编程</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> faceUpCardIndices <span class="token operator">=</span> cards<span class="token punctuation">.</span>indices<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> cards<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">//cards.indices是0..&lt;cards.count filter返回一个满足条件的数组</span>
<span class="token keyword">var</span> faceUpCardIndices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> index <span class="token keyword">in</span> cards<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> cards<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp <span class="token punctuation">&#123;</span>
		faceUpCardIndices<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193p_note6 Protocols Shapes</title>
    <url>/2022/03/05/cs193p-note6/</url>
    <content><![CDATA[<h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><p>协议是一个精简的<code>class</code>或<code>struct</code></p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">Moveable</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">func</span> <span class="token function-definition function">move</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> hasMoved<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> distanceFromStart<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>若协议要求一个属性为可读和可写的，那么该属性要求不能用常量存储属性或只读计算属性来满足。若协议只要求属性为可读的，那么任何种类的属性都能满足这个要求，而且如果你的代码需要的话，该属性也可以是可写的。</p>
<span id="more"></span>

<p>func和var没有任何实现</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ProtableThing</span><span class="token punctuation">:</span> <span class="token class-name">Moveable</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//必须执行move(by: Int),hasMoved,distanceFromStart</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">protocol</span> <span class="token class-name">Vehicle</span><span class="token punctuation">:</span> <span class="token class-name">Moveable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> passengerCount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token keyword">set</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token class-name">Vehiche</span><span class="token punctuation">,</span> <span class="token class-name">Leasable</span> <span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">travelAround</span><span class="token punctuation">(</span>using moveable<span class="token punctuation">:</span> <span class="token class-name">Moveable</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Moveable</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>让don’t care变得有一点在乎 <code>struct MemoryGame&lt;CardContent&gt; where CardContent: Equatable</code></p>
<p>将extension扩展为仅使用某些事情，也可以限制个别功能</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">Date</span><span class="token punctuation">:</span> <span class="token class-name">Collection</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>只为接收到特定类型数据进行初始化</p>
<p>&#x3D;&#x3D;协议可以通过创建extension来实施，可以在扩展中添加默认实施&#x3D;&#x3D;</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> isInclude<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Element</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>适用于数组、字符串、范围等，被添加到基础库中，作为Sequence协议的扩展</p>
<h4 id="Identifiable"><a href="#Identifiable" class="headerlink" title="Identifiable"></a>Identifiable</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">associatedtype</span> <span class="token constant">ID</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token comment">//关联类型</span>
    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token constant">ID</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Hashable"><a href="#Hashable" class="headerlink" title="Hashable"></a>Hashable</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">Hashable</span><span class="token punctuation">:</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">hash</span><span class="token punctuation">(</span>into hasher<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Hasher</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="Equatable"><a href="#Equatable" class="headerlink" title="Equatable"></a>Equatable</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">==</span><span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>自引用协议不能作为普通类型使用</p>
<h3 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h3><p>Shape is a <code>protocol</code> that inherits from View</p>
<p>RoundedRectangle,Circle,Capsule</p>
<p> 默认被填满颜色，可以通过<code>.stock()</code>和<code>.fill()</code>改变</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">fill</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token omit keyword">_</span> whatToFillWith<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token class-name">ShapeStyle</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建自己的Shape</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span> rect<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Path</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token class-name">Path</span> 
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>能添加line、arc、berzier curve</p>
<p>绘图坐标系，非笛卡尔坐标系，零坐标在左上角，顺逆时针会相反</p>
]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note7 ViewModifier Animation</title>
    <url>/2022/04/15/cs193p-note7/</url>
    <content><![CDATA[<h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><ul>
<li>为Shape设置动画</li>
<li>使用ViewModifier做动画</li>
</ul>
<p>只有改变可以被动画化，改变ViewModifier的参数，Shape的参数，UI中是否存在视图</p>
<p>动画显示给用户已经发生的变化</p>
<span id="more"></span>

<p>ViewModifier是主要的变更代理，更改参数必须在View放入UI之后</p>
<p>视图加入或离开一个已经在用户界面的容器时，才会被动画。如果一个视图带着容器一起出现在屏幕上，容器会被动画化，而不是视图</p>
<h4 id="如何制作动画"><a href="#如何制作动画" class="headerlink" title="如何制作动画"></a>如何制作动画</h4><ol>
<li><p>Implicitly 隐含的自动的，通过使用<code>.animation(Animation)</code> </p>
</li>
<li><p>Explicitly 想要整个UI协调变化的动画 <code>withAnimation(Animation) &#123;&#125;</code> </p>
</li>
<li><p>从UI中包括或排除视图，做独立视图</p>
<p> 所有的只发生在视图已经存在于UI中或或容器在UI中</p>
</li>
</ol>
<h4 id="Implicit-Animation"><a href="#Implicit-Animation" class="headerlink" title="Implicit Animation"></a>Implicit Animation</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>scary <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token class-name">Angle</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>upsideDown <span class="token operator">?</span> <span class="token number">180</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token class-name">Animation</span><span class="token punctuation">.</span>easeInOut<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>让上面的变化变成动画</p>
<ul>
<li>不适用于任何容器，容器会传播到里面的视图中</li>
<li>其中的参数是一个Animation结构，duration持续时间，delay调用一个小函数，repeat重复一定次数或永久重复(repeatForever)，curve动画曲线</li>
</ul>
<h5 id="Animation-Curve"><a href="#Animation-Curve" class="headerlink" title="Animation Curve"></a>Animation Curve</h5><ul>
<li>linear线性的方式旋转或淡入淡出</li>
<li>easeInOut 开始和结束放慢速度</li>
<li>spring 结束时震荡，提供自然的落地效果</li>
</ul>
<h4 id="Explicit-Animation"><a href="#Explicit-Animation" class="headerlink" title="Explicit Animation"></a>Explicit Animation</h4><p>创建一个动画事务(transaction)，所有符合条件的更改一起制作动画</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>dutation<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>显式动画总是围绕着ViewModel Intent functions，很有可能改变模型。</p>
<p>&#x3D;&#x3D;<strong>显式动画不会覆盖隐式动画</strong>&#x3D;&#x3D;</p>
<h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h4><p>视图的来去，仅适用于已经出现在屏幕上的视图</p>
<p>大多数情况使用预先罐装(opacity, scaling, moving across the screen)，是在AnyTransition结构上的静态函数和变量</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">if</span> isFaceUp <span class="token punctuation">&#123;</span>
    <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"👻"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span>identity<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="onAppear"><a href="#onAppear" class="headerlink" title=".onAppear"></a>.onAppear</h5><p>当视图出现在屏幕时执行一个闭包，在容器视图上使用<code>.onAppear&#123;&#125;</code>，当视图出现在屏幕时可以执行一系列代码</p>
<h3 id="ViewModifier"><a href="#ViewModifier" class="headerlink" title="ViewModifier"></a>ViewModifier</h3><p>修改视图的小功能，例如<code>.aspectRatio(2/3)</code></p>
<p>唯一的工作就是修改视图</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">typealias</span> <span class="token class-name">Content</span><span class="token comment">//正在修改的视图</span>
    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> someView <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">some</span> <span class="token class-name">View</span> that almost certainly contains the <span class="token class-name">View</span> content
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>特殊的ViewModifier，是GeometryEffect，只修改几何，如缩放、平行、旋转</li>
</ul>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">Cardify</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> isFaceUp<span class="token punctuation">:</span> <span class="token class-name">Bool</span>
    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">Cardify</span><span class="token punctuation">(</span>isFaceUp<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">cardify</span><span class="token punctuation">(</span>isFaceUp<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">Cardify</span><span class="token punctuation">(</span>isFaceUp<span class="token punctuation">:</span> isFaceUp<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="GeometryEffect"><a href="#GeometryEffect" class="headerlink" title="GeometryEffect"></a>GeometryEffect</h4><p>使事物旋转，移动物体，调整物体大小等</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token class-name">Angle</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>isMatched <span class="token operator">?</span> <span class="token number">360</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token class-name">Animation</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//不会自动反转</span>
<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token class-name">Animation</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> card<span class="token punctuation">.</span>isMatched<span class="token punctuation">)</span> <span class="token comment">//iOS15.0推荐用法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>旋转匹配成功的内容，，这么只会旋转第一个内容，而且旋转时字体大小改变，字体不能进行动画，旋转时有多个动画一起发生，要使用固定大小字体。</p>
<p>创建动画时注意三个原则，可以通过opacity使内容在屏幕上隐藏。</p>
<p>animation参考：<a href="https://juejin.cn/post/7067340603494924296">https://juejin.cn/post/7067340603494924296</a></p>
]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note8 Animation Demostrastion</title>
    <url>/2022/05/02/cs193p-note8/</url>
    <content><![CDATA[<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="实现洗牌动画"><a href="#实现洗牌动画" class="headerlink" title="实现洗牌动画"></a>实现洗牌动画</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> shuffle<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Shuffle"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        withAnimation <span class="token punctuation">&#123;</span>
            game<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>快速点击shuffle按钮，未完成的动画会自动暂停并继续新的操作，上面图案旋转使用的是隐式动画，独立于显示，所以能在旋转的时候完成洗牌操作。</p>
<span id="more"></span>

<h4 id="什么时候使用显示动画"><a href="#什么时候使用显示动画" class="headerlink" title="什么时候使用显示动画"></a>什么时候使用显示动画</h4><p>用于Intent函数，当你表达你的意图时，总是要修改模型。在因为反应而对模型修改，变动视图时使用</p>
<p>一边使用<code>withAnimation() &#123;&#125;</code>包裹在Intent周围</p>
<h4 id="为卡片翻转做动画"><a href="#为卡片翻转做动画" class="headerlink" title="为卡片翻转做动画"></a>为卡片翻转做动画</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token class-name">Angle</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>isFaceUp <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用时，还没翻转90度，就会出现图案，不合理。因为动画是淡入淡出，没翻转90度时，红色的背面会变淡，而表情符号会慢慢显现，所以要跟踪旋转多少角度，进行突然显示</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">init</span><span class="token punctuation">(</span>isFaceUp<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	rotation <span class="token operator">=</span> isFaceUp <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">180</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>使用isFaceUp对旋转角度进行初始化。</p>
<p>使用Animatable，对旋转角度进行逐步变化，实现到达90度才会发生变化，自定义ViewModifier</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> animatableData<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> rotation <span class="token punctuation">&#125;</span>
    <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> rotation <span class="token operator">=</span> newValue <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h4><p>匹配成功时，卡片消失时使用了过渡，是淡入淡出的形式消失的</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">CardView</span><span class="token punctuation">(</span>card<span class="token punctuation">:</span> card<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token comment">//使视图缩小并逐渐消失</span>
	<span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span><span class="token function">asymmetric</span><span class="token punctuation">(</span>insertion<span class="token punctuation">:</span> <span class="token punctuation">.</span>scale<span class="token punctuation">,</span> removal<span class="token punctuation">:</span> <span class="token punctuation">.</span>opacity<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment">//进入的效果和消失的效果不一样，但是本次视图没有出现的时候，一直在屏幕上，所以要让AspectVGrid先出现，然后再出现内部卡片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>@State</code>进行状态设置，利用。<code>onAppear()</code>让卡片处理发生在AspectVGrid出现后。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> dealt <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">deal</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> card<span class="token punctuation">:</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    dealt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">isUndealt</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> card<span class="token punctuation">:</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span><span class="token punctuation">&#123;</span>
    <span class="token operator">!</span>dealt<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">AspectVGrid</span><span class="token punctuation">(</span>items<span class="token punctuation">:</span> game<span class="token punctuation">.</span>cards<span class="token punctuation">,</span> aspectRatio<span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> card <span class="token keyword">in</span>
            <span class="token keyword">if</span> <span class="token function">isUndealt</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>card<span class="token punctuation">.</span>isMatched <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>card<span class="token punctuation">.</span>isFaceUp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Color</span><span class="token punctuation">.</span>clear
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">CardView</span><span class="token punctuation">(</span>card<span class="token punctuation">:</span> card<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">.</span>onAppear<span class="token punctuation">&#123;</span>
            <span class="token comment">// "deal" card</span>
            withAnimation <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> card <span class="token keyword">in</span> game<span class="token punctuation">.</span>cards <span class="token punctuation">&#123;</span>
                    <span class="token function">deal</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="真正的发牌"><a href="#真正的发牌" class="headerlink" title="真正的发牌"></a>真正的发牌</h4><p>matchedGeometryEffect</p>
<p>如果你想，可以和transition共同进行</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@Namespace</span> <span class="token keyword">private</span> <span class="token keyword">var</span> dealingNameSpace
<span class="token class-name">CardView</span><span class="token punctuation">(</span>card<span class="token punctuation">:</span> card<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> card<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> dealingNameSpace<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>实现一张一张的发牌</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">dealAnimation</span><span class="token punctuation">(</span><span class="token keyword">for</span> card<span class="token punctuation">:</span> <span class="token class-name">EmojiMemoryGame</span><span class="token punctuation">.</span><span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Animation</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> delay <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> game<span class="token punctuation">.</span>cards<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> card<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        delay <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">CardConstants</span><span class="token punctuation">.</span>totalDealDuration <span class="token operator">/</span>      <span class="token class-name">Double</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>cards<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token class-name">Animation</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token class-name">CardConstants</span><span class="token punctuation">.</span>dealDuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> card <span class="token keyword">in</span> game<span class="token punctuation">.</span>cards <span class="token punctuation">&#123;</span>
    <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token function">dealAnimation</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> card<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">deal</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实现从卡排堆从上到下发牌，在发牌时排队</p>
<p>在gamebody和deckbody同时添加zIndex</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">zIndex</span><span class="token punctuation">(</span><span class="token function">zIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> card<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>较高的数字排在前面</p>
<h4 id="重启游戏"><a href="#重启游戏" class="headerlink" title="重启游戏"></a>重启游戏</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> restart<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Restart"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        withAnimation <span class="token punctuation">&#123;</span>
            dealt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            game<span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="计时系统"><a href="#计时系统" class="headerlink" title="计时系统"></a>计时系统</h4><p>使用属性观察者，计算时间</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> isFaceUp <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> isFaceUp <span class="token punctuation">&#123;</span>
            <span class="token function">startUsingBonusTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">stopUsingBonusTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> isMatched <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>
        <span class="token function">stopUsingBonusTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更改Pie中的参数设置，<code>endAngle: Angle(degrees: (1-card.bonusRemaining)*360-90)</code>，发现，时间在计时，但是视图并没有实时跟踪。</p>
<p>使用@State，追踪时间</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> card<span class="token punctuation">.</span>isConsumingBonusTime <span class="token punctuation">&#123;</span> <span class="token comment">//卡片正面</span>
        <span class="token class-name">Pie</span><span class="token punctuation">(</span>startAngle<span class="token punctuation">:</span> <span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endAngle<span class="token punctuation">:</span> <span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>animatedBonusRemaining<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">360</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>
            <span class="token comment">//卡片出现时，让追踪变成pie剩余大小，然后以剩余时间为持续时间向0做动画</span>
            animatedBonusRemaining <span class="token operator">=</span> card<span class="token punctuation">.</span>bonusRemaining 
            <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> card<span class="token punctuation">.</span>bonusTimeRemaining<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                animatedBonusRemaining <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Pie</span><span class="token punctuation">(</span>startAngle<span class="token punctuation">:</span> <span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endAngle<span class="token punctuation">:</span> <span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>card<span class="token punctuation">.</span>bonusRemaining<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">360</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note9_EmojiArt Drag and Drop Multithreading</title>
    <url>/2022/05/04/cs193p-note9/</url>
    <content><![CDATA[<h3 id="Collection-of-Identifiables"><a href="#Collection-of-Identifiables" class="headerlink" title="Collection of Identifiables"></a>Collection of Identifiables</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">choose</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> card<span class="token punctuation">:</span> <span class="token class-name">Card</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> cards<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> card<span class="token punctuation">,</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cards<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isFaceUp <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Card是一个结构体，结构体是值类型，在传递时会被复制，所以想要改变卡片的isFaceUp需要获取索引，在数组中找到修改的位置。</p>
<span id="more"></span>

<p>在数组中存结构体时很常见，可以利用一个小函数解决。</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span>matching element<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> element<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
card<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>matching<span class="token punctuation">:</span> card<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>将函数放在扩展Array中（也适用于Set）</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">Array</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span>matching element<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> element<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然，我们也可以把代码放在Collection协议中，Set和Array都实现</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">Collection</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span><span class="token comment">//不可变集合</span>
    <span class="token keyword">func</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span>matching element<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Index</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span><span class="token comment">//索引不一定是Int，是个泛型</span>
        <span class="token function">firstIndex</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>id <span class="token operator">==</span> element<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
    <span class="token comment">//Collection中不包括remove，所以把内容添加到RangeReplaceableCollection</span>
<span class="token keyword">extension</span> <span class="token class-name">RangeReplaceableCollection</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span><span class="token comment">//可变集合</span>
    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> element<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>matching<span class="token punctuation">:</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>RangeReplaceCollection可以添加下标，可以使用数组下标或可识别的集合变成可识别的，<code>cards[card].isFaceUp = true</code></p>
<h3 id="Color-amp-UIColor-amp-CGColor"><a href="#Color-amp-UIColor-amp-CGColor" class="headerlink" title="Color&amp;UIColor&amp;CGColor"></a>Color&amp;UIColor&amp;CGColor</h3><h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><ul>
<li>用来指定颜色 <code>.foregroundColor(Color.green)</code></li>
<li>作为ShapeStyle，填充，<code>.fill(Color.blue)</code></li>
<li>像视图一样，<code>Color.white</code></li>
</ul>
<h4 id="UIColor"><a href="#UIColor" class="headerlink" title="UIColor"></a>UIColor</h4><ul>
<li>有很多API，能获取并调整RGB，颜色饱和度，亮度</li>
<li>拥有UIColor，可以用Color使用，<code>Color(uiColor: )</code></li>
</ul>
<h4 id="CGColor"><a href="#CGColor" class="headerlink" title="CGColor"></a>CGColor</h4><ul>
<li>Core Graphic中基础的颜色表示</li>
<li>使用<code>color.cgColor</code>表示 不能保证每一个都能被表示</li>
<li>如果将Color变成UIColor可能会使用</li>
</ul>
<h3 id="Image-amp-UIImage"><a href="#Image-amp-UIImage" class="headerlink" title="Image&amp;UIImage"></a>Image&amp;UIImage</h3><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><ul>
<li>主要是一个视图</li>
<li>不是容纳图片的类型，是显示图片的视图</li>
<li>可以在Assets.xcassets中访问图片 <code>Image(_ name: String)</code></li>
<li>使用<code>Image(systemName:)</code>创建SF符号，使用<code>.imageScale()</code>调整SF符号大小，SF视图受字体影响，可以当蒙版使用</li>
</ul>
<h4 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h4><ul>
<li>能缩放调整大小等，是用来存储图片的变量</li>
<li>使用<code>Image(uiImage:)</code>来显示</li>
</ul>
<h3 id="Drag-and-Drop"><a href="#Drag-and-Drop" class="headerlink" title="Drag and Drop"></a>Drag and Drop</h3><p>从一个应用拖到另一个应用传输数据，从Safari拖动图片到app。核心类是<code>NSItemProvider</code>类，进程之间的数据传输。</p>
<p>便利地转移不同数据类型</p>
<ul>
<li>NSAttributedString具有格式的字符串  NSString</li>
<li>NSURL</li>
<li>UIImage UIColor</li>
</ul>
<p>使用连接数据类型和NS类型，String as NSString</p>
<h3 id="Dome"><a href="#Dome" class="headerlink" title="Dome"></a>Dome</h3><h4 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h4><p>借助OC中内容完成拖放，使用as转换数据类型，NSItemProvider将数据提供给别人</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Text</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span>
	<span class="token punctuation">.</span>onDrag <span class="token punctuation">&#123;</span> <span class="token class-name">NSItemProvider</span><span class="token punctuation">(</span>object<span class="token punctuation">:</span> emoji <span class="token keyword">as</span> <span class="token class-name">NSString</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>放下时，需要将整个Vstack下放置drop</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//of后添加可放下的类型</span>
<span class="token punctuation">.</span><span class="token function">onDrop</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>plainText<span class="token punctuation">]</span><span class="token punctuation">,</span> isTargeted<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> providers<span class="token punctuation">,</span> location <span class="token keyword">in</span>
	<span class="token keyword">return</span> <span class="token function">drop</span><span class="token punctuation">(</span>providers<span class="token punctuation">:</span> providers<span class="token punctuation">,</span> at<span class="token punctuation">:</span> location<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span>providers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSItemProvider</span><span class="token punctuation">]</span><span class="token punctuation">,</span> at location<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> <span class="token keyword">in</span> geometry<span class="token punctuation">:</span> <span class="token class-name">GeometryProxy</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> providers<span class="token punctuation">.</span><span class="token function">loadObjects</span><span class="token punctuation">(</span>ofType<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> string <span class="token keyword">in</span> <span class="token comment">//提供者是否有字符串,将异步操作内容,因为提供者可能采用多线程提供信息,脱离主线程</span>
		<span class="token keyword">if</span> <span class="token keyword">let</span> emoji <span class="token operator">=</span> string<span class="token punctuation">.</span>first<span class="token punctuation">,</span> emoji<span class="token punctuation">.</span>isEmoji <span class="token punctuation">&#123;</span>
			document<span class="token punctuation">.</span><span class="token function">addEmoji</span><span class="token punctuation">(</span>
				<span class="token class-name">String</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span><span class="token punctuation">,</span>
				at<span class="token punctuation">:</span> <span class="token function">convertToEmojiCoordinates</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> geometry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//将CGPoint转换成元组</span>
				size<span class="token punctuation">:</span> defaultEmojiFontSize<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多线程-Multithreading"><a href="#多线程-Multithreading" class="headerlink" title="多线程 Multithreading"></a>多线程 Multithreading</h3><p>从浏览器找到图片拖进去，但是从互联网下载图片可能需要几秒钟，可能会影响UI响应。</p>
<p>UI需要响应用户内容，但有些操作需要比较长的时间，我们需要在不同的线程上执行操作，才能保证UI响应</p>
<h4 id="线程-treads"><a href="#线程-treads" class="headerlink" title="线程 treads"></a>线程 treads</h4><p>可以指定线程用于哪些代码，快速切换线程看起来像同时在运行。有一些线程拥有更高的优先级</p>
<p>使用队列管理复杂的线程</p>
<h4 id="Queues-Closures"><a href="#Queues-Closures" class="headerlink" title="Queues Closures"></a>Queues Closures</h4><p>队列只是一堆排队等待线程执行的代码块。指定在队列里等待的代码块是闭包。</p>
<p>多线程API的核心是&#x3D;&#x3D;将闭包放进队列&#x3D;&#x3D;</p>
<h4 id="Main-Queue"><a href="#Main-Queue" class="headerlink" title="Main Queue"></a>Main Queue</h4><p>最重要的队列是main queue，是包含所有可能破坏UI界面的代码块，所有的UI的操作都需要主队列</p>
<p>系统使用单线程执行处理所有在主队列中的代码块，所以可以使用主队列作为同步点(synchronize)。可以对数据结构的写入在主队列，你的读取可以发生在任何队列。</p>
<h4 id="Background-Queues"><a href="#Background-Queues" class="headerlink" title="Background Queues"></a>Background Queues</h4><p>有一堆后台队列用来执行长期的、非UI任务，例如请求网络、机器学习。</p>
<p>系统有一堆可用的线程执行后台队列上的代码块，可以并行执行</p>
<h4 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h4><p>处理队列的基础API是GCD(Grand Central Dispatch)</p>
<p>基础功能</p>
<ul>
<li>访问队列</li>
<li>将一段代码添加到队列中</li>
</ul>
<h4 id="创建一个队列"><a href="#创建一个队列" class="headerlink" title="创建一个队列"></a>创建一个队列</h4><p>main queue是DispatchQueue上的静态变量</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main <span class="token comment">//所有的UI代码必须放在这里发布</span>
<span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span>qos<span class="token punctuation">:</span> <span class="token class-name">QoS</span><span class="token punctuation">)</span> <span class="token comment">//服务质量</span>
qos
	<span class="token punctuation">.</span>userInteractive <span class="token comment">//几乎和主队列一样重要，与用户进行实时交互，计算内容更新到UI上，速度最快</span>
	<span class="token punctuation">.</span>userInitiated   <span class="token comment">//用户触发级，用户点击按钮，在网上点击下载等现在马上要做的内容 UI界面依然活跃</span>
	<span class="token punctuation">.</span>utility	  	 <span class="token comment">//实用级 清理数据库等，不需要马上去做</span>
	<span class="token punctuation">.</span>background		 <span class="token comment">//背景级 自动任务或定时处理任务等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="在队列上放置闭包"><a href="#在队列上放置闭包" class="headerlink" title="在队列上放置闭包"></a>在队列上放置闭包</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main
queue<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//异步</span>
queue<span class="token punctuation">.</span>sync <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">//同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>同步，代码执行完才会返回，阻塞当前线程，不在主队列中使用</p>
<p>异步，将代码块放到队列中，立刻返回</p>
<p>可以把延时放在队列中</p>
<h4 id="URLSession"><a href="#URLSession" class="headerlink" title="URLSession"></a>URLSession</h4>]]></content>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集</title>
    <url>/2022/03/08/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>信息收集的方法有很多，例如不与攻击目标直接接触，从公开信息入手了解攻击，称为被动信息收集，也可以使用网络扫描等手段主动与攻击对象发生接触，称主动信息收集。</p>
<p>信息收集内容，技术相关信息：IP地址、子域名、数据库的类型、开放的端口，非技术信息：公司信息、个人信息、习惯、发表的东西</p>
<span id="more"></span>

<h3 id="目标基本信息"><a href="#目标基本信息" class="headerlink" title="目标基本信息"></a>目标基本信息</h3><p>目标基本信息指企业概况、企业理念、规模、产品、工商注册等信息。通过对目标基本信息的收集，攻击者可以对目标形成初步了解，定位其核心价值资产</p>
<p>公司的官网会介绍公司的组织结构、核心成员、地理位置等信息，“关于”、“了解”、ICP备案证书等，获取了公司地址可以尝试连接无认证或采用WEP加密的wifi热点，准备假wifi让员工加入等。获取法人代表信息，查询同一人名的多个公司，进行突破，可以用来钓鱼</p>
<h3 id="目标组织架构"><a href="#目标组织架构" class="headerlink" title="目标组织架构"></a>目标组织架构</h3><p>目标组织架构是进行企业流程运转、部门设置及职能规划等最基本的结构依据，对子公司、母公司等进行信息收集，可以扩大攻击面，增加成功率</p>
<h3 id="目标其他公开信息"><a href="#目标其他公开信息" class="headerlink" title="目标其他公开信息"></a>目标其他公开信息</h3><p>包括新闻、招投标信息</p>
<h3 id="目标域名信息"><a href="#目标域名信息" class="headerlink" title="目标域名信息"></a>目标域名信息</h3><p>目标域名信息收集包括对目标域名的whois信息、域名历史信息收集、注册人&#x2F;注册邮箱&#x2F;注册电话反查等。技术手段信息等第一个步骤。</p>
<p>通过whois反查可以通过邮箱查找到同一个邮箱备案的多个域名</p>
<h3 id="目标子域名"><a href="#目标子域名" class="headerlink" title="目标子域名"></a>目标子域名</h3><p>目标子域名收集包括对目标的二级域名、三级域名、四级域名等进行收集。发现隐藏的、被遗忘的子域名上的应用程序可能意味着发现关键漏洞。子域名收集深度和广度决定了进行攻击时的范围，在一定程度上也决定是否可以成功突破目标边界系统。</p>
<p>常见的子域名收集手段：</p>
<ul>
<li>搜索引擎接口查询，表达式： site:example.com</li>
<li>一些网站 如dnsdb提供查询子域名的服务</li>
<li>Ssl证书的Subject Alternative Name字段提供对应的子域名 如 <a href="http://censys.io.certificates/">http://censys.io.certificates</a></li>
<li>子域名暴力破解，使用暴力破解工具遍历各种子域名</li>
</ul>
<h3 id="目标IP"><a href="#目标IP" class="headerlink" title="目标IP"></a>目标IP</h3><p>目标IP即测试目标对外开放的应用于对外服务的IP地址。当子域名无法突破目标时，通过对ip及其开放端口和服务进行攻击，甚至有些不在管理及保护范围内的地址。</p>
<h3 id="邮件信息收集"><a href="#邮件信息收集" class="headerlink" title="邮件信息收集"></a>邮件信息收集</h3><p>利用邮件系统对目标口令暴力破解或钓鱼</p>
<h3 id="聊天群组"><a href="#聊天群组" class="headerlink" title="聊天群组"></a>聊天群组</h3><p>群文件等关键信息 搜索公司关键字</p>
<h3 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h3><p>以往在互联网公开的目标的各系统漏洞信息。可收集域名信息、IP信息、系统结构等</p>
<p>通过搜索引擎收集</p>
<h3 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h3><p>![image-20220311182005093](&#x2F;Users&#x2F;jiangwenrong&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220311182005093.png)</p>
<ul>
<li><p>主机发现</p>
<p>  ![image-20220311182552226](&#x2F;Users&#x2F;jiangwenrong&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220311182552226.png)</p>
</li>
<li><p>主机识别</p>
</li>
<li><p>端口扫描</p>
</li>
<li><p>服务识别</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络攻击与防护</category>
      </categories>
      <tags>
        <tag>信息搜集</tag>
      </tags>
  </entry>
</search>
