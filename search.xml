<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS193p_assignment2</title>
    <url>/2022/02/18/cs193p-ls/</url>
    <content><![CDATA[<p>​    一个历时很久的blog，学完Lesson4之后，自己码的Assignment2的代码，也不知道对不对（毕竟没有参考代码），仅供参考啊</p>
<h3 id="Task1-amp-2-省略"><a href="#Task1-amp-2-省略" class="headerlink" title="Task1&amp;2: 省略"></a>Task1&amp;2: 省略</h3><h3 id="Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色"><a href="#Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色" class="headerlink" title="Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色"></a>Task3：将主题添加到模型中，包括主题的名称、一组表情符号、要展示的卡片对数和适当的背景颜色</h3><p>创建一个结构体存储主题</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> emojis: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">var</span> numberOfPairsOfCards: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="Task4-amp-8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题"><a href="#Task4-amp-8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题" class="headerlink" title="Task4&amp;8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题"></a>Task4&amp;8：在游戏中至少有一个主题展示的卡片数少于总数，支持六种主题</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private(set)</span> <span class="keyword">var</span> themes: [<span class="type">Theme</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Theme</span>(</span><br><span class="line">        name: <span class="string">&quot;Veiche&quot;</span>,</span><br><span class="line">        emojis: [<span class="string">&quot;🚌&quot;</span>,<span class="string">&quot;🚗&quot;</span>,<span class="string">&quot;🚓&quot;</span>,<span class="string">&quot;🚑&quot;</span>,<span class="string">&quot;🛻&quot;</span>,<span class="string">&quot;🏎&quot;</span>,<span class="string">&quot;🚲&quot;</span>,<span class="string">&quot;🚂&quot;</span>,<span class="string">&quot;✈️&quot;</span>,<span class="string">&quot;🚀&quot;</span>,<span class="string">&quot;🛶&quot;</span>,<span class="string">&quot;🛸&quot;</span>,<span class="string">&quot;🚕&quot;</span>,<span class="string">&quot;🚙&quot;</span>,<span class="string">&quot;🚎&quot;</span>,<span class="string">&quot;🚛&quot;</span>,<span class="string">&quot;🚁&quot;</span>,<span class="string">&quot;🏍&quot;</span>,<span class="string">&quot;🦽&quot;</span>,<span class="string">&quot;🚒&quot;</span>,<span class="string">&quot;🚜&quot;</span>,<span class="string">&quot;🚠&quot;</span>,<span class="string">&quot;🚄&quot;</span>,<span class="string">&quot;🛰&quot;</span>],</span><br><span class="line">        numberOfPairsOfCards: <span class="number">8</span>,</span><br><span class="line">        color: <span class="string">&quot;red&quot;</span>),</span><br><span class="line">    <span class="type">Theme</span>(</span><br><span class="line">        name: <span class="string">&quot;Animal&quot;</span>,</span><br><span class="line">        emojis: [<span class="string">&quot;🐶&quot;</span>,<span class="string">&quot;🐱&quot;</span>,<span class="string">&quot;🐭&quot;</span>,<span class="string">&quot;🐰&quot;</span>,<span class="string">&quot;🦊&quot;</span>,<span class="string">&quot;🐻&quot;</span>,<span class="string">&quot;🐼&quot;</span>,<span class="string">&quot;🐮&quot;</span>,<span class="string">&quot;🐵&quot;</span>,<span class="string">&quot;🐧&quot;</span>,<span class="string">&quot;🦋&quot;</span>,<span class="string">&quot;🐢&quot;</span>,<span class="string">&quot;🐝&quot;</span>,<span class="string">&quot;🦆&quot;</span>,<span class="string">&quot;🐙&quot;</span>,<span class="string">&quot;🦐&quot;</span>,<span class="string">&quot;🦀&quot;</span>],</span><br><span class="line">        numberOfPairsOfCards: <span class="number">6</span>,</span><br><span class="line">        color: <span class="string">&quot;blue&quot;</span>),</span><br><span class="line">    <span class="type">Theme</span>(name: <span class="string">&quot;Face&quot;</span>,</span><br><span class="line">           emojis: [<span class="string">&quot;😀&quot;</span>,<span class="string">&quot;☺️&quot;</span>,<span class="string">&quot;😊&quot;</span>,<span class="string">&quot;😇&quot;</span>,<span class="string">&quot;🥰&quot;</span>,<span class="string">&quot;😌&quot;</span>,<span class="string">&quot;😉&quot;</span>,<span class="string">&quot;🙃&quot;</span>,<span class="string">&quot;😋&quot;</span>,<span class="string">&quot;🤨&quot;</span>,<span class="string">&quot;😏&quot;</span>,<span class="string">&quot;😒&quot;</span>,<span class="string">&quot;😭&quot;</span>,<span class="string">&quot;🥵&quot;</span>,<span class="string">&quot;😳&quot;</span>,<span class="string">&quot;🤔&quot;</span>,<span class="string">&quot;🤗&quot;</span>,<span class="string">&quot;😷&quot;</span>],</span><br><span class="line">           numberOfPairsOfCards: <span class="number">7</span>,</span><br><span class="line">           color: <span class="string">&quot;green&quot;</span>),</span><br><span class="line">	<span class="comment">//添加6种</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> emojis <span class="operator">=</span> theme.emojis.shuffled()</span><br></pre></td></tr></table></figure>
<h3 id="Task5-amp-6-amp-7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片-主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量"><a href="#Task5-amp-6-amp-7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片-主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量" class="headerlink" title="Task5&amp;6&amp;7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片 主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量"></a>Task5&amp;6&amp;7：不存在永远不会出现的卡片，不允许出现两对相同符号的卡片 主题中指定显示的卡片数量超过卡用的数量，自动减少显示的卡片数量</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pairs <span class="operator">=</span> emojis.count</span><br><span class="line">       <span class="keyword">if</span> pairs <span class="operator">&gt;</span> theme.numberOfPairsOfCards &#123;</span><br><span class="line">           pairs <span class="operator">=</span> theme.numberOfPairsOfCards</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//model的数据类型是model结构</span></span><br><span class="line">       <span class="keyword">return</span> <span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt;(numberOfPairsOfCards: pairs) &#123; pairIndex <span class="keyword">in</span></span><br><span class="line">           emojis[pairIndex]</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Task9：新主题能通过代码被添加到游戏中"><a href="#Task9：新主题能通过代码被添加到游戏中" class="headerlink" title="Task9：新主题能通过代码被添加到游戏中"></a>Task9：新主题能通过代码被添加到游戏中</h3><h3 id="Task10-amp-11：在UI中添加”New-Game”按钮，开始新的游戏，开始游戏应重新选择主题"><a href="#Task10-amp-11：在UI中添加”New-Game”按钮，开始新的游戏，开始游戏应重新选择主题" class="headerlink" title="Task10&amp;11：在UI中添加”New Game”按钮，开始新的游戏，开始游戏应重新选择主题"></a>Task10&amp;11：在UI中添加”New Game”按钮，开始新的游戏，开始游戏应重新选择主题</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> &#123;</span><br><span class="line">    viewModel.newGame()</span><br><span class="line">&#125; label: &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;New Game&quot;</span>)</span><br><span class="line">        .font(.largeTitle)</span><br><span class="line">        .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">init</span>(<span class="params">startTheme</span>: <span class="type">Theme</span>? <span class="operator">=</span> <span class="literal">nil</span>)</span> &#123;</span><br><span class="line">	theme <span class="operator">=</span> themes.randomElement()<span class="operator">!</span></span><br><span class="line">	cardcolor <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.color(theme: theme)</span><br><span class="line">	model <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.createMemoryGame(theme: theme)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newGame</span>()</span> &#123;</span><br><span class="line">	theme <span class="operator">=</span> themes.randomElement()<span class="operator">!</span></span><br><span class="line">	cardcolor <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.color(theme: theme)</span><br><span class="line">	model <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.createMemoryGame(theme: theme)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Task12-amp-13：游戏中卡片正面朝下-新游戏卡片被打乱"><a href="#Task12-amp-13：游戏中卡片正面朝下-新游戏卡片被打乱" class="headerlink" title="Task12&amp;13：游戏中卡片正面朝下,新游戏卡片被打乱"></a>Task12&amp;13：游戏中卡片正面朝下,新游戏卡片被打乱</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">init</span>(<span class="params">numberOfPairsOfCards</span>: <span class="type">Int</span>, <span class="params">creatCardContent</span>: (<span class="type">Int</span>) -&gt; <span class="type">CardContent</span>)</span> &#123;</span><br><span class="line">    cards <span class="operator">=</span> <span class="type">Array</span>&lt;<span class="type">Card</span>&gt;()</span><br><span class="line">    <span class="comment">//添加两倍的卡牌</span></span><br><span class="line">    <span class="keyword">for</span> pairIndex <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>numberOfPairsOfCards &#123;</span><br><span class="line">        <span class="keyword">let</span> content <span class="operator">=</span> creatCardContent(pairIndex)</span><br><span class="line">        cards.append(<span class="type">Card</span>(content: content, id: pairIndex<span class="operator">*</span><span class="number">2</span>))</span><br><span class="line">        cards.append(<span class="type">Card</span>(content: content, id: pairIndex<span class="operator">*</span><span class="number">2</span><span class="operator">+</span><span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    cards.shuffle()</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Card</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isFaceUp: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> isMatched: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> content: <span class="type">CardContent</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> seen: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Task14-amp-16：在UI中显示主题的名称和分数"><a href="#Task14-amp-16：在UI中显示主题的名称和分数" class="headerlink" title="Task14&amp;16：在UI中显示主题的名称和分数"></a>Task14&amp;16：在UI中显示主题的名称和分数</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Theme:  <span class="subst">\(viewModel.theme.name)</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="type">Spacer</span>()</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Score:    <span class="subst">\(viewModel.score)</span>&quot;</span>)</span><br><span class="line">&#125;.foregroundColor(.red)</span><br></pre></td></tr></table></figure>
<h3 id="Task15：匹配成功分数-2，匹配不成功且每含有一张被看见过的牌分数-2"><a href="#Task15：匹配成功分数-2，匹配不成功且每含有一张被看见过的牌分数-2" class="headerlink" title="Task15：匹配成功分数+2，匹配不成功且每含有一张被看见过的牌分数-2"></a>Task15：匹配成功分数+2，匹配不成功且每含有一张被看见过的牌分数-2</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">choose</span>(<span class="keyword">_</span> <span class="params">card</span>: <span class="type">Card</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> chosenIndex <span class="operator">=</span> cards.firstIndex(where: &#123; <span class="variable">$0</span>.id <span class="operator">==</span> card.id &#125;),</span><br><span class="line">       <span class="operator">!</span>cards[chosenIndex].isFaceUp,</span><br><span class="line">       <span class="operator">!</span>cards[chosenIndex].isMatched</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> potentialMatchIndex <span class="operator">=</span> indexOfTheOneAndOnlyFaceUpCard &#123; <span class="comment">//如果有纸牌被掀开</span></span><br><span class="line">            <span class="keyword">if</span> cards[chosenIndex].content <span class="operator">==</span> cards[potentialMatchIndex].content &#123; <span class="comment">//能匹配</span></span><br><span class="line">                cards[chosenIndex].isMatched <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                cards[potentialMatchIndex].isMatched <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                score <span class="operator">+=</span> <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> cards[potentialMatchIndex].seen &#123;</span><br><span class="line">                    score <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> cards[chosenIndex].seen &#123;</span><br><span class="line">                    score <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                cards[potentialMatchIndex].seen <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                cards[chosenIndex].seen <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            indexOfTheOneAndOnlyFaceUpCard <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> cards.indices &#123;</span><br><span class="line">                cards[index].isFaceUp <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            indexOfTheOneAndOnlyFaceUpCard <span class="operator">=</span> chosenIndex</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cards[chosenIndex].isFaceUp.toggle()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><p>ContentView.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> viewModel: <span class="type">EmojiMemoryGame</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ScrollView</span> &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                viewModel.newGame()</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;New Game&quot;</span>)</span><br><span class="line">                    .font(.largeTitle)</span><br><span class="line">                    .foregroundColor(<span class="type">Color</span>.red)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Theme:  <span class="subst">\(viewModel.theme.name)</span>&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Score:    <span class="subst">\(viewModel.score)</span>&quot;</span>)</span><br><span class="line">            &#125;.foregroundColor(.red)</span><br><span class="line">            </span><br><span class="line">            <span class="type">LazyVGrid</span>(columns: [<span class="type">GridItem</span>(.adaptive(minimum: <span class="number">75</span>))]) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(viewModel.cards) &#123; card <span class="keyword">in</span></span><br><span class="line">                    <span class="type">CardView</span>(card: card)</span><br><span class="line">                        .aspectRatio(<span class="number">2</span><span class="operator">/</span><span class="number">3</span>, contentMode: .fit)</span><br><span class="line">                        .onTapGesture&#123;</span><br><span class="line">                            viewModel.choose(card)</span><br><span class="line">                        &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .foregroundColor(viewModel.cardcolor)</span><br><span class="line">        .padding(.horizontal)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CardView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> card: <span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt;.<span class="type">Card</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> shape <span class="operator">=</span> <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">20</span>)</span><br><span class="line">            <span class="keyword">if</span> card.isFaceUp &#123;</span><br><span class="line">                shape.fill().foregroundColor(.white)</span><br><span class="line">                shape.strokeBorder(lineWidth: <span class="number">3</span>)</span><br><span class="line">                <span class="type">Text</span>(card.content).font(.largeTitle)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> card.isMatched &#123;</span><br><span class="line">                shape.opacity(<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                shape.fill()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> game <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>()</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>(viewModel: game)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>EmojiMemoryGame.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmojiMemoryGame</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createMemoryGame</span>(<span class="params">theme</span>: <span class="type">Theme</span>)</span> -&gt; <span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt; &#123; <span class="comment">//添加参数</span></span><br><span class="line">        <span class="keyword">let</span> emojis <span class="operator">=</span> theme.emojis.shuffled()</span><br><span class="line">        <span class="keyword">var</span> pairs <span class="operator">=</span> emojis.count</span><br><span class="line">        <span class="keyword">if</span> pairs <span class="operator">&gt;</span> theme.numberOfPairsOfCards &#123;</span><br><span class="line">            pairs <span class="operator">=</span> theme.numberOfPairsOfCards</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//model的数据类型是model结构</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt;(numberOfPairsOfCards: pairs) &#123; pairIndex <span class="keyword">in</span></span><br><span class="line">            emojis[pairIndex]</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">private</span> <span class="keyword">var</span> model: <span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt;<span class="comment">//初始化或静态访问静态不需要全名</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> cardcolor: <span class="type">Color</span></span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">startTheme</span>: <span class="type">Theme</span>? <span class="operator">=</span> <span class="literal">nil</span>)</span> &#123;</span><br><span class="line">        theme <span class="operator">=</span> themes.randomElement()<span class="operator">!</span></span><br><span class="line">        cardcolor <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.color(theme: theme)</span><br><span class="line">        model <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.createMemoryGame(theme: theme)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回view model 变量类型是数组&lt;model中的Card&gt;结构</span></span><br><span class="line">    <span class="keyword">var</span> cards: <span class="type">Array</span>&lt;<span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt;.<span class="type">Card</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> model.cards<span class="comment">//返回model中的cards数组 数组的结构是Card</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">color</span>(<span class="params">theme</span>: <span class="type">Theme</span>)</span> -&gt; <span class="type">Color</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;red&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.red</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;green&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.green</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;yellow&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.yellow</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;blue&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.blue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;purple&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.purple</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;pink&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.pink</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;gray&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.gray</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> theme.color <span class="operator">==</span> <span class="string">&quot;orange&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.orange</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.gray</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> score: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model.score</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: - Intent(s)</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">choose</span>(<span class="keyword">_</span> <span class="params">card</span>: <span class="type">MemoryGame</span>&lt;<span class="type">String</span>&gt;.<span class="type">Card</span>)</span> &#123;</span><br><span class="line">        model.choose(card)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">newGame</span>()</span> &#123;</span><br><span class="line">        theme <span class="operator">=</span> themes.randomElement()<span class="operator">!</span></span><br><span class="line">        cardcolor <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.color(theme: theme)</span><br><span class="line">        model <span class="operator">=</span> <span class="type">EmojiMemoryGame</span>.createMemoryGame(theme: theme)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MemoryGame.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryGame</span>&lt;<span class="title">CardContent</span>&gt; <span class="title">where</span> <span class="title">CardContent</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> cards: <span class="type">Array</span>&lt;<span class="type">Card</span>&gt;</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> score: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> indexOfTheOneAndOnlyFaceUpCard: <span class="type">Int</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">choose</span>(<span class="keyword">_</span> <span class="params">card</span>: <span class="type">Card</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> chosenIndex <span class="operator">=</span> cards.firstIndex(where: &#123; <span class="variable">$0</span>.id <span class="operator">==</span> card.id &#125;),</span><br><span class="line">           <span class="operator">!</span>cards[chosenIndex].isFaceUp,</span><br><span class="line">           <span class="operator">!</span>cards[chosenIndex].isMatched</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> potentialMatchIndex <span class="operator">=</span> indexOfTheOneAndOnlyFaceUpCard &#123; <span class="comment">//如果有纸牌被掀开</span></span><br><span class="line">                <span class="keyword">if</span> cards[chosenIndex].content <span class="operator">==</span> cards[potentialMatchIndex].content &#123; <span class="comment">//能匹配</span></span><br><span class="line">                    cards[chosenIndex].isMatched <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    cards[potentialMatchIndex].isMatched <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    score <span class="operator">+=</span> <span class="number">2</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> cards[potentialMatchIndex].seen &#123;</span><br><span class="line">                        score <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> cards[chosenIndex].seen &#123;</span><br><span class="line">                        score <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    cards[potentialMatchIndex].seen <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    cards[chosenIndex].seen <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                indexOfTheOneAndOnlyFaceUpCard <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> index <span class="keyword">in</span> cards.indices &#123;</span><br><span class="line">                    cards[index].isFaceUp <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                indexOfTheOneAndOnlyFaceUpCard <span class="operator">=</span> chosenIndex</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            cards[chosenIndex].isFaceUp.toggle()</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">numberOfPairsOfCards</span>: <span class="type">Int</span>, <span class="params">creatCardContent</span>: (<span class="type">Int</span>) -&gt; <span class="type">CardContent</span>)</span> &#123;</span><br><span class="line">        cards <span class="operator">=</span> <span class="type">Array</span>&lt;<span class="type">Card</span>&gt;()</span><br><span class="line">        <span class="comment">//添加两倍的卡牌</span></span><br><span class="line">        <span class="keyword">for</span> pairIndex <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>numberOfPairsOfCards &#123;</span><br><span class="line">            <span class="keyword">let</span> content <span class="operator">=</span> creatCardContent(pairIndex)</span><br><span class="line">            cards.append(<span class="type">Card</span>(content: content, id: pairIndex<span class="operator">*</span><span class="number">2</span>))</span><br><span class="line">            cards.append(<span class="type">Card</span>(content: content, id: pairIndex<span class="operator">*</span><span class="number">2</span><span class="operator">+</span><span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        cards.shuffle()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Card</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isFaceUp: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> isMatched: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> content: <span class="type">CardContent</span></span><br><span class="line">        <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">        <span class="keyword">var</span> seen: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Theme.swift</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> emojis: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">var</span> numberOfPairsOfCards: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private(set)</span> <span class="keyword">var</span> themes: [<span class="type">Theme</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Theme</span>(</span><br><span class="line">        name: <span class="string">&quot;Veiche&quot;</span>,</span><br><span class="line">        emojis: [<span class="string">&quot;🚌&quot;</span>,<span class="string">&quot;🚗&quot;</span>,<span class="string">&quot;🚓&quot;</span>,<span class="string">&quot;🚑&quot;</span>,<span class="string">&quot;🛻&quot;</span>,<span class="string">&quot;🏎&quot;</span>,<span class="string">&quot;🚲&quot;</span>,<span class="string">&quot;🚂&quot;</span>,<span class="string">&quot;✈️&quot;</span>,<span class="string">&quot;🚀&quot;</span>,<span class="string">&quot;🛶&quot;</span>,<span class="string">&quot;🛸&quot;</span>,<span class="string">&quot;🚕&quot;</span>,<span class="string">&quot;🚙&quot;</span>,<span class="string">&quot;🚎&quot;</span>,<span class="string">&quot;🚛&quot;</span>,<span class="string">&quot;🚁&quot;</span>,<span class="string">&quot;🏍&quot;</span>,<span class="string">&quot;🦽&quot;</span>,<span class="string">&quot;🚒&quot;</span>,<span class="string">&quot;🚜&quot;</span>,<span class="string">&quot;🚠&quot;</span>,<span class="string">&quot;🚄&quot;</span>,<span class="string">&quot;🛰&quot;</span>],</span><br><span class="line">        numberOfPairsOfCards: <span class="number">8</span>,</span><br><span class="line">        color: <span class="string">&quot;red&quot;</span>),</span><br><span class="line">    <span class="type">Theme</span>(</span><br><span class="line">        name: <span class="string">&quot;Animal&quot;</span>,</span><br><span class="line">        emojis: [<span class="string">&quot;🐶&quot;</span>,<span class="string">&quot;🐱&quot;</span>,<span class="string">&quot;🐭&quot;</span>,<span class="string">&quot;🐰&quot;</span>,<span class="string">&quot;🦊&quot;</span>,<span class="string">&quot;🐻&quot;</span>,<span class="string">&quot;🐼&quot;</span>,<span class="string">&quot;🐮&quot;</span>,<span class="string">&quot;🐵&quot;</span>,<span class="string">&quot;🐧&quot;</span>,<span class="string">&quot;🦋&quot;</span>,<span class="string">&quot;🐢&quot;</span>,<span class="string">&quot;🐝&quot;</span>,<span class="string">&quot;🦆&quot;</span>,<span class="string">&quot;🐙&quot;</span>,<span class="string">&quot;🦐&quot;</span>,<span class="string">&quot;🦀&quot;</span>],</span><br><span class="line">        numberOfPairsOfCards: <span class="number">6</span>,</span><br><span class="line">        color: <span class="string">&quot;blue&quot;</span>),</span><br><span class="line">    <span class="type">Theme</span>(name: <span class="string">&quot;Face&quot;</span>,</span><br><span class="line">           emojis: [<span class="string">&quot;😀&quot;</span>,<span class="string">&quot;☺️&quot;</span>,<span class="string">&quot;😊&quot;</span>,<span class="string">&quot;😇&quot;</span>,<span class="string">&quot;🥰&quot;</span>,<span class="string">&quot;😌&quot;</span>,<span class="string">&quot;😉&quot;</span>,<span class="string">&quot;🙃&quot;</span>,<span class="string">&quot;😋&quot;</span>,<span class="string">&quot;🤨&quot;</span>,<span class="string">&quot;😏&quot;</span>,<span class="string">&quot;😒&quot;</span>,<span class="string">&quot;😭&quot;</span>,<span class="string">&quot;🥵&quot;</span>,<span class="string">&quot;😳&quot;</span>,<span class="string">&quot;🤔&quot;</span>,<span class="string">&quot;🤗&quot;</span>,<span class="string">&quot;😷&quot;</span>],</span><br><span class="line">           numberOfPairsOfCards: <span class="number">7</span>,</span><br><span class="line">           color: <span class="string">&quot;green&quot;</span>),</span><br><span class="line">    <span class="type">Theme</span>(name: <span class="string">&quot;Hallowmans&quot;</span>,</span><br><span class="line">           emojis: [<span class="string">&quot;👻&quot;</span>,<span class="string">&quot;🎃&quot;</span>,<span class="string">&quot;😈&quot;</span>,<span class="string">&quot;🍬&quot;</span>,<span class="string">&quot;🕷&quot;</span>],</span><br><span class="line">           numberOfPairsOfCards: <span class="number">8</span>,</span><br><span class="line">           color: <span class="string">&quot;orange&quot;</span>),</span><br><span class="line">    <span class="type">Theme</span>(name: <span class="string">&quot;Foot&quot;</span>,</span><br><span class="line">           emojis: [<span class="string">&quot;🎂&quot;</span>,<span class="string">&quot;🍡&quot;</span>,<span class="string">&quot;🍱&quot;</span>,<span class="string">&quot;🍛&quot;</span>,<span class="string">&quot;🍝&quot;</span>,<span class="string">&quot;🌯&quot;</span>,<span class="string">&quot;🍕&quot;</span>,<span class="string">&quot;🍟&quot;</span>,<span class="string">&quot;🍔&quot;</span>,<span class="string">&quot;🌭&quot;</span>,<span class="string">&quot;🍗&quot;</span>,<span class="string">&quot;🥗&quot;</span>,<span class="string">&quot;🍲&quot;</span>,<span class="string">&quot;🍤&quot;</span>,<span class="string">&quot;🥮&quot;</span>,<span class="string">&quot;🥧&quot;</span>,<span class="string">&quot;🍩&quot;</span>,<span class="string">&quot;🍪&quot;</span>,<span class="string">&quot;🍵&quot;</span>,<span class="string">&quot;🍞&quot;</span>,<span class="string">&quot;🥐&quot;</span>,<span class="string">&quot;🥖&quot;</span>,<span class="string">&quot;🥞&quot;</span>,<span class="string">&quot;🫕&quot;</span>],</span><br><span class="line">           numberOfPairsOfCards: <span class="number">8</span>,</span><br><span class="line">           color: <span class="string">&quot;purple&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>参考代码：<a href="https://github.com/sk-ruban/CS193p">https://github.com/sk-ruban/CS193p</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193p_note5 Properties Layout @ViewBuilder</title>
    <url>/2022/02/28/cs193p-note5/</url>
    <content><![CDATA[<h2 id="Computed-Properties-计算属性"><a href="#Computed-Properties-计算属性" class="headerlink" title="Computed Properties 计算属性"></a>Computed Properties 计算属性</h2><p>不提供存储值，提供读取器和设置器，接收和设置其他属性</p>
<p>get用来接收数据，并且返回值，set用来设置其他属性或值</p>
<h2 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h2><p>变化会在必要时重新绘制，相当于@ObservedObject</p>
<span id="more"></span>

<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>屏幕的空间如何分配给所有视图</p>
<ol>
<li>视图容器为其中的视图提供空间</li>
<li>视图根据提供给他们的空间选择自己的尺寸，不是被分配</li>
<li>一旦视图调整了自己的大小，将视图放置在视图容器里</li>
<li>视图容器选择大小，基于里面的视图</li>
</ol>
<h3 id="HStack-amp-VStack"><a href="#HStack-amp-VStack" class="headerlink" title="HStack &amp; VStack"></a>HStack &amp; VStack</h3><p>最不灵活的视图</p>
<p>例如，Image和Text有固定大小，Image的自然大小，Text将字符串放进去，不灵活；RoundedRectangle非常灵活，如果你给他空间，他会占据全部空间，填满。</p>
<p>从最不灵活的视图先分配，text如果空间不够会自动省略，如果stack里面的视图非常灵活，那么本身就会变灵活</p>
<ul>
<li><p><code>Spacer(miniLength: CGFloat)</code>非常灵活，需要尽可能多的空间</p>
</li>
<li><p><code>Divide()</code> 画一条线分割视图</p>
</li>
<li><p><code>.layoutPriority()</code> 先获得视图的分配，默认是0</p>
</li>
</ul>
<p>Vstack生成一列视图，默认居中     </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">VStack</span>(alignment: .leading) &#123; <span class="operator">...</span> &#125; <span class="comment">//.leading .trailing</span></span><br><span class="line"><span class="type">VStack</span>(alignment: .firstTextBaseline) &#123;&#125; <span class="comment">//文本基线</span></span><br><span class="line"><span class="comment">//定义自己的排列方式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hstack &#123;</span><br><span class="line">	ForEach(viewModel.cards)&#123; card in</span><br><span class="line">		CardView(card: card).aspectRatio(2/3, contentMode: .fit)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">.foregroundColor(Color.orange)</span><br><span class="line">.padding(10)</span><br></pre></td></tr></table></figure>



<h3 id="LazyHStack-amp-LazyVStack"><a href="#LazyHStack-amp-LazyVStack" class="headerlink" title="LazyHStack &amp; LazyVStack"></a>LazyHStack &amp; LazyVStack</h3><ul>
<li><p>不构建不在屏幕上显示的视图，只构建ScrollView中显示在屏幕上的</p>
</li>
<li><p>不灵活，如果有灵活视图，不能给所有空间，会尽可能的小</p>
</li>
</ul>
<h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p>接收任何视图在其中滚动</p>
<h3 id="LazyHGrid-amp-LazyVGrid"><a href="#LazyHGrid-amp-LazyVGrid" class="headerlink" title="LazyHGrid &amp; LazyVGrid"></a>LazyHGrid &amp; LazyVGrid</h3><p>控制多少列或者多少行</p>
<h3 id="ZStack"><a href="#ZStack" class="headerlink" title="ZStack"></a>ZStack</h3><p>调整自己的大小合适子项</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;hello&quot;</span>).background(<span class="type">Rectangle</span>().foregroundColor(.red))</span><br><span class="line"><span class="comment">//背景大小取决于文字，不是灵活的尺寸</span></span><br><span class="line"><span class="type">Circle</span>().overlay(<span class="type">Text</span>(<span class="string">&quot;hello&quot;</span>), alignment: .center)</span><br><span class="line"><span class="comment">//文字不重要，很灵活</span></span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Hstack</span>&#123;</span><br><span class="line">    <span class="type">ForEach</span>(viewmodel.cards) &#123; card <span class="keyword">in</span></span><br><span class="line">    	<span class="type">CardView</span>(card: card).aspectRatio(<span class="number">2</span><span class="operator">/</span><span class="number">3</span>, contentMode: .fit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.foregroundColor(<span class="type">Color</span>.orange)</span><br><span class="line">.padding(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>首先提供padding的空间，容器最外层的空间，将空间-10后提供给foregroundColor</li>
<li>foregroundColor提供相同的空间给Hstack</li>
<li>Hstack将空间平均分给aspectRatio</li>
<li>提供空间给CardView</li>
</ol>
<h3 id="GeometryReader"><a href="#GeometryReader" class="headerlink" title="GeometryReader"></a>GeometryReader</h3><p>本身总是适应提供的空间</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">GeometryReader</span>&#123; geometry <span class="keyword">in</span> </span><br><span class="line">		<span class="operator">...</span></span><br><span class="line">&#125;<span class="comment">//放在视图里 计算视图大小</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GrometryProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">CGSize</span> <span class="comment">//提供视图大小</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">frame</span>(<span class="params">in</span>: <span class="type">CoordinateSpace</span>)</span> -&gt; <span class="type">CGRect</span></span><br><span class="line">    <span class="keyword">var</span> safeAreaInsets: <span class="type">EdgeInsets</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ZStack</span> &#123;&#125;.edgesIgnoringSafeArea([.top]) <span class="comment">//画入安全区域</span></span><br></pre></td></tr></table></figure>

<h2 id="ViewBuilder"><a href="#ViewBuilder" class="headerlink" title="@ViewBuilder"></a>@ViewBuilder</h2><p>将函数返回成很对个视图组成的一个视图，创建的视图被称为TupleView</p>
<p>任意<code>func</code>或<code>只读的计算属性</code>都可以标识为<code>@ViewBuilder</code>，一旦标识，它里面的内容将会被解析为<code>a list of Views</code></p>
<h2 id="零散的东西"><a href="#零散的东西" class="headerlink" title="零散的东西"></a>零散的东西</h2><p>函数式编程</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> faceUpCardIndices <span class="operator">=</span> cards.indices.filter(&#123; cards[<span class="variable">$0</span>].isFaceUp &#125;)</span><br><span class="line"><span class="comment">//cards.indices是0..&lt;cards.count filter返回一个满足条件的数组</span></span><br><span class="line"><span class="keyword">var</span> faceUpCardIndices <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> cards.indices &#123;</span><br><span class="line">		<span class="keyword">if</span> cards[index].isFaceUp &#123;</span><br><span class="line">		faceUpCardIndices.append(index)</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193p_note6 Protocols Shapes</title>
    <url>/2022/03/05/cs193p-note6/</url>
    <content><![CDATA[<h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>协议是一个精简的<code>class</code>或<code>struct</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Moveable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">move</span>(<span class="params">by</span>: <span class="type">Int</span>)</span></span><br><span class="line">    <span class="keyword">var</span> hasMoved: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> distanceFromStart: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若协议要求一个属性为可读和可写的，那么该属性要求不能用常量存储属性或只读计算属性来满足。若协议只要求属性为可读的，那么任何种类的属性都能满足这个要求，而且如果你的代码需要的话，该属性也可以是可写的。</p>
<span id="more"></span>

<p>func和var没有任何实现</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProtableThing</span>: <span class="title">Moveable</span> </span>&#123;</span><br><span class="line">	<span class="comment">//必须执行move(by: Int),hasMoved,distanceFromStart</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span>: <span class="title">Moveable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> passengerCount: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="title">Vehiche</span>, <span class="title">Leasable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">travelAround</span>(<span class="params">using</span> <span class="params">moveable</span>: <span class="type">Moveable</span>)</span></span><br><span class="line"><span class="keyword">let</span> foo <span class="operator">=</span> [<span class="type">Moveable</span>]</span><br></pre></td></tr></table></figure>

<p>让don’t care变得有一点在乎 <code>struct MemoryGame&lt;CardContent&gt; where CardContent: Equatable</code></p>
<p>将extension扩展为仅使用某些事情，也可以限制个别功能</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">init</span>(<span class="params">data</span>: <span class="type">Data</span>)</span> <span class="keyword">where</span> <span class="type">Date</span>: <span class="type">Collection</span>, <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Identifiable</span></span><br></pre></td></tr></table></figure>

<p>只为接收到特定类型数据进行初始化</p>
<p>&#x3D;&#x3D;协议可以通过创建extension来实施，可以在扩展中添加默认实施&#x3D;&#x3D;</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">filter</span>(<span class="keyword">_</span> <span class="params">isInclude</span>: (<span class="type">Element</span>) -&gt; <span class="type">Bool</span>)</span> -&gt; <span class="type">Array</span>&lt;<span class="type">Element</span>&gt;</span><br></pre></td></tr></table></figure>

<p>适用于数组、字符串、范围等，被添加到基础库中，作为Sequence协议的扩展</p>
<h3 id="Identifiable"><a href="#Identifiable" class="headerlink" title="Identifiable"></a>Identifiable</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">ID</span>: <span class="type">Hashable</span> <span class="comment">//关联类型</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">ID</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hashable"><a href="#Hashable" class="headerlink" title="Hashable"></a>Hashable</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Hashable</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hash</span>(<span class="params">into</span> <span class="params">hasher</span>: <span class="keyword">inout</span> <span class="type">Hasher</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Equatable"><a href="#Equatable" class="headerlink" title="Equatable"></a>Equatable</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span>(<span class="params">lhs</span>: <span class="keyword">Self</span>, <span class="params">rhs</span>: <span class="keyword">Self</span>)</span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自引用协议不能作为普通类型使用</p>
<h2 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h2><p>Shape is a <code>protocol</code> that inherits from View</p>
<p>RoundedRectangle,Circle,Capsule</p>
<p> 默认被填满颜色，可以通过<code>.stock()</code>和<code>.fill()</code>改变</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fill</span>&lt;<span class="type">S</span>&gt;(<span class="keyword">_</span> <span class="params">whatToFillWith</span>: <span class="type">S</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> <span class="keyword">where</span> <span class="type">S</span>: <span class="type">ShapeStyle</span></span><br></pre></td></tr></table></figure>

<p>创建自己的Shape</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>)</span> -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="type">Path</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能添加line、arc、berzier curve</p>
<p>绘图坐标系，非笛卡尔坐标系，零坐标在左上角，顺逆时针会相反</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集</title>
    <url>/2022/03/08/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>信息收集的方法有很多，例如不与攻击目标直接接触，从公开信息入手了解攻击，称为被动信息收集，也可以使用网络扫描等手段主动与攻击对象发生接触，称主动信息收集。</p>
<p>信息收集内容，技术相关信息：IP地址、子域名、数据库的类型、开放的端口，非技术信息：公司信息、个人信息、习惯、发表的东西</p>
<span id="more"></span>

<h3 id="目标基本信息"><a href="#目标基本信息" class="headerlink" title="目标基本信息"></a>目标基本信息</h3><p>目标基本信息指企业概况、企业理念、规模、产品、工商注册等信息。通过对目标基本信息的收集，攻击者可以对目标形成初步了解，定位其核心价值资产</p>
<p>公司的官网会介绍公司的组织结构、核心成员、地理位置等信息，“关于”、“了解”、ICP备案证书等，获取了公司地址可以尝试连接无认证或采用WEP加密的wifi热点，准备假wifi让员工加入等。获取法人代表信息，查询同一人名的多个公司，进行突破，可以用来钓鱼</p>
<h3 id="目标组织架构"><a href="#目标组织架构" class="headerlink" title="目标组织架构"></a>目标组织架构</h3><p>目标组织架构是进行企业流程运转、部门设置及职能规划等最基本的结构依据，对子公司、母公司等进行信息收集，可以扩大攻击面，增加成功率</p>
<h3 id="目标其他公开信息"><a href="#目标其他公开信息" class="headerlink" title="目标其他公开信息"></a>目标其他公开信息</h3><p>包括新闻、招投标信息</p>
<h3 id="目标域名信息"><a href="#目标域名信息" class="headerlink" title="目标域名信息"></a>目标域名信息</h3><p>目标域名信息收集包括对目标域名的whois信息、域名历史信息收集、注册人&#x2F;注册邮箱&#x2F;注册电话反查等。技术手段信息等第一个步骤。</p>
<p>通过whois反查可以通过邮箱查找到同一个邮箱备案的多个域名</p>
<h3 id="目标子域名"><a href="#目标子域名" class="headerlink" title="目标子域名"></a>目标子域名</h3><p>目标子域名收集包括对目标的二级域名、三级域名、四级域名等进行收集。发现隐藏的、被遗忘的子域名上的应用程序可能意味着发现关键漏洞。子域名收集深度和广度决定了进行攻击时的范围，在一定程度上也决定是否可以成功突破目标边界系统。</p>
<p>常见的子域名收集手段：</p>
<ul>
<li>搜索引擎接口查询，表达式： site:example.com</li>
<li>一些网站 如dnsdb提供查询子域名的服务</li>
<li>Ssl证书的Subject Alternative Name字段提供对应的子域名 如 <a href="http://censys.io.certificates/">http://censys.io.certificates</a></li>
<li>子域名暴力破解，使用暴力破解工具遍历各种子域名</li>
</ul>
<h3 id="目标IP"><a href="#目标IP" class="headerlink" title="目标IP"></a>目标IP</h3><p>目标IP即测试目标对外开放的应用于对外服务的IP地址。当子域名无法突破目标时，通过对ip及其开放端口和服务进行攻击，甚至有些不在管理及保护范围内的地址。</p>
<h3 id="邮件信息收集"><a href="#邮件信息收集" class="headerlink" title="邮件信息收集"></a>邮件信息收集</h3><p>利用邮件系统对目标口令暴力破解或钓鱼</p>
<h3 id="聊天群组"><a href="#聊天群组" class="headerlink" title="聊天群组"></a>聊天群组</h3><p>群文件等关键信息 搜索公司关键字</p>
<h3 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h3><p>以往在互联网公开的目标的各系统漏洞信息。可收集域名信息、IP信息、系统结构等</p>
<p>通过搜索引擎收集</p>
<h3 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h3><p>![image-20220311182005093](&#x2F;Users&#x2F;jiangwenrong&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220311182005093.png)</p>
<ul>
<li><p>主机发现</p>
<p>  ![image-20220311182552226](&#x2F;Users&#x2F;jiangwenrong&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220311182552226.png)</p>
</li>
<li><p>主机识别</p>
</li>
<li><p>端口扫描</p>
</li>
<li><p>服务识别</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络攻击与防护</category>
      </categories>
      <tags>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>CS193p_assignment3</title>
    <url>/2022/03/20/cs193-a3/</url>
    <content><![CDATA[<h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><blockquote>
<p>实施一个单人游戏Set</p>
</blockquote>
<h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><blockquote>
<p>所有卡片可见，卡片尽可能的大。也可以增加一个最小尺寸，然后恢复滚动。所有的卡片都必须可识别</p>
</blockquote>
<span id="more"></span>

<h3 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h3><blockquote>
<p>有相同的长宽比</p>
</blockquote>
<h3 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h3><blockquote>
<p>符号的大小根据卡片大小决定</p>
</blockquote>
<h3 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h3><blockquote>
<p>选择三张牌匹配，能够看到哪些牌已经被选中</p>
</blockquote>
<h3 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h3><blockquote>
<p>只要有三张牌被选中，要显示是否匹配，不匹配的三个和只选择1或2张牌时看起来不一样</p>
</blockquote>
<h3 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h3><blockquote>
<p>支持点击已经选中的牌取消选中，只选择1或2时</p>
</blockquote>
<h3 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h3><blockquote>
<p>没读明白啊，回头再说</p>
<p>当任何一张牌被触摸到，并且已经有3张相匹配的套装牌被选中。<br>那么…<br>a. 按照 “套牌 “的规则，用新的 “套牌 “替换这3张匹配的牌。牌<br>b. 如果这副牌是空的，那么就把那些匹配的牌所空出来的位置（因为没有更多的牌，所以不能被替换）。b. 如果这副牌是空的，那么这副牌所腾出的空间（因为没有更多的牌，所以不能被替换）就应该让给剩余的 的牌（也就是说，这些牌很可能会变大）。<br>c. 如果被碰的牌不属于匹配的牌组，则选择该牌。<br>d. 如果被摸到的牌是匹配组的一部分，那么就不选择任何牌。</p>
</blockquote>
<h3 id="Task-9"><a href="#Task-9" class="headerlink" title="Task 9"></a>Task 9</h3><blockquote>
<p>有三张不匹配的牌被选中，取消这三张牌，选中点击的牌</p>
</blockquote>
<h3 id="Task-10"><a href="#Task-10" class="headerlink" title="Task 10"></a>Task 10</h3><blockquote>
<p>有“Deal 3 More Cards”按钮</p>
<p>你需要有一个 “再发3张牌 “的按钮（根据Set的规则）。<br>a. 当它被触动时，如果所选的牌组成了一套牌，则替换所选的牌。<br>b. 或者，如果所选的牌不组成一套牌（或者所选的牌少于3张，包括没有），则增加3张新牌，加入屏幕上已经出现的牌（并且不影响选择）。<br>c. 如果牌组是空的，则禁用此按钮。</p>
</blockquote>
<h3 id="Task-11"><a href="#Task-11" class="headerlink" title="Task 11"></a>Task 11</h3><blockquote>
<p>有一个“New Game”按钮，开始新游戏，回到12个随机卡</p>
</blockquote>
<h3 id="Task-12"><a href="#Task-12" class="headerlink" title="Task 12"></a>Task 12</h3><blockquote>
<p>用长方形代替弯曲</p>
</blockquote>
<h3 id="Task-13"><a href="#Task-13" class="headerlink" title="Task 13"></a>Task 13</h3><blockquote>
<p>自己编写Shape结构制作“diamond”</p>
</blockquote>
<h3 id="Task-14"><a href="#Task-14" class="headerlink" title="Task 14"></a>Task 14</h3><blockquote>
<p>条纹表示为半透明，和纯色区分开</p>
</blockquote>
<h3 id="Task-15-amp-16"><a href="#Task-15-amp-16" class="headerlink" title="Task 15&amp;16"></a>Task 15&amp;16</h3><blockquote>
<p>使用枚举作为方案中有意义的部分，使用闭包(一个作为参数的函数)，三个不同颜色</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>CS193_note 1-4</title>
    <url>/2022/02/20/cs193-note1-2/</url>
    <content><![CDATA[<h3 id="RoundedRectangle"><a href="#RoundedRectangle" class="headerlink" title="RoundedRectangle"></a>RoundedRectangle</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">20</span>)</span><br><span class="line">	.fill() <span class="comment">//填满</span></span><br><span class="line">	.foregroundColor(.red) <span class="comment">//前景颜色</span></span><br><span class="line">	.stroke(lineWidth: <span class="number">3</span>) <span class="comment">//边框宽度</span></span><br><span class="line">	.strokeBorder</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="ZStack"><a href="#ZStack" class="headerlink" title="ZStack"></a>ZStack</h3><p>在z轴叠加视图，返回一整个视图内容</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ZStack</span>(alignment: .top)&#123;</span><br><span class="line">    <span class="comment">//在顶部对齐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HStack"><a href="#HStack" class="headerlink" title="HStack"></a>HStack</h3><p>水平堆叠</p>
<h3 id="LazyVGrid"><a href="#LazyVGrid" class="headerlink" title="LazyVGrid"></a>LazyVGrid</h3><p>网格，指定列数，把尽可能多的东西放在一行，垂直滑动，搭配ScrollView使用</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">LazyVGrid</span>(columns: [<span class="type">GridItem</span>(.adaptive(minimum: <span class="number">75</span>))])</span><br></pre></td></tr></table></figure>

<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>分离了用户界面代码</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>完全独立于UI data 和 logic，app实际上做什么</p>
<h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>反映model内容 响应式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ObservedObject</span></span><br><span class="line"><span class="meta">@Binding</span></span><br><span class="line">.onReceive</span><br><span class="line"><span class="meta">@EnvironmentObject</span></span><br><span class="line">.environmentObject()</span><br></pre></td></tr></table></figure>



<h4 id="ModelView"><a href="#ModelView" class="headerlink" title="ModelView"></a>ModelView</h4><p>绑定view和model，解释器。View通过ViewModel获取Model的数据，从来不储存数据。</p>
<p>ViewModel不断观察Model中的变化，发布变化，视图subscribing（订阅），发布的内容。使用class</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ObservableObject</span></span><br><span class="line"><span class="meta">@Published</span></span><br><span class="line">objectWillChange.send()</span><br></pre></td></tr></table></figure>

<p>处理用户意图，修改Model内容</p>
<h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><h4 id="struct-amp-amp-class"><a href="#struct-amp-amp-class" class="headerlink" title="struct &amp;&amp; class"></a>struct &amp;&amp; class</h4><p>储存变量和计算变量、函数、初始化器</p>
<p>ViewModel使用class，在所有视图中共享</p>
<table>
<thead>
<tr>
<th align="center">struct</th>
<th align="center">class</th>
</tr>
</thead>
<tbody><tr>
<td align="center">值类型</td>
<td align="center">引用类型</td>
</tr>
<tr>
<td align="center">传递或分配变量时复制内容</td>
<td align="center">传递时只传递指向它的指针</td>
</tr>
<tr>
<td align="center">写时复制，直到修改才会复制完整内容</td>
<td align="center">自动引用计数，跟踪有多少指向某事物的指针，没人指向时，从内存中删除</td>
</tr>
<tr>
<td align="center">函数式编程</td>
<td align="center">面对对象编程</td>
</tr>
<tr>
<td align="center">没有继承</td>
<td align="center">单一继承</td>
</tr>
<tr>
<td align="center">免费初始化所有变量，如果没有编写init函数</td>
<td align="center">不能初始化变量</td>
</tr>
<tr>
<td align="center">明确的定义 var let</td>
<td align="center">总是可变的</td>
</tr>
</tbody></table>
<h4 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h4><p>对不知道类型上的数据，不在乎它是什么类型</p>
<p>类型参数</p>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> operation: (<span class="type">Double</span>) -&gt; <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span>(<span class="params">operand</span>: <span class="type">Double</span>)</span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> operand <span class="operator">*</span> operand</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operation <span class="operator">=</span> square</span><br><span class="line"><span class="keyword">let</span> result1 <span class="operator">=</span> operation(<span class="number">4</span>) <span class="comment">//16 	调用时不使用标签</span></span><br></pre></td></tr></table></figure>

<h3 id="反应"><a href="#反应" class="headerlink" title="反应"></a>反应</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ObservableObject</span> <span class="comment">//向世界发布有所改变</span></span><br><span class="line"><span class="comment">//得到一个看不见的var</span></span><br><span class="line"><span class="keyword">var</span> objectWillChange: <span class="type">ObservableObjectPublisher</span></span><br><span class="line">objectWillChange.send() <span class="comment">//向世界发送改变</span></span><br><span class="line"><span class="meta">@Published</span> <span class="comment">//放在变量前无论何时发生变化都发送</span></span><br><span class="line"><span class="meta">@ObservedObject</span> <span class="comment">//放在变量前，发生改变时重建body</span></span><br></pre></td></tr></table></figure>

<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p>数据结构，离散的值</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FastFoodMenuItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> hamburger</span><br><span class="line">    <span class="keyword">case</span> fries</span><br><span class="line">    <span class="keyword">case</span> drink</span><br><span class="line">    <span class="keyword">case</span> cookie</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>值传递，会被复制</li>
</ul>
<p>每个状态都可以有一些关联数据</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FastFoodMenuItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> hamburger(numberOfPatties: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> fries(size: <span class="type">FryOrderSize</span>)</span><br><span class="line">    <span class="keyword">case</span> drink (<span class="type">String</span>, ounces: <span class="type">Int</span>) <span class="comment">//string没有标签</span></span><br><span class="line">    <span class="keyword">case</span> cookie</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FryOrderSize</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> large</span><br><span class="line">    <span class="keyword">case</span> small</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> menuItem: <span class="type">FastFoodMenuItem</span> <span class="operator">=</span> <span class="type">FastFoodMenuItem</span>.hamburger(patties: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> otherItem: <span class="type">FastFoodMenuItem</span> <span class="operator">=</span> .cookie</span><br></pre></td></tr></table></figure>

<p>检查值</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> menuItem: <span class="type">FastFoodMenuItem</span> <span class="operator">=</span> <span class="type">FastFoodMenuItem</span>.hamburger(patties: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">switch</span> menuItem &#123;</span><br><span class="line">    <span class="keyword">case</span> .hamburger(<span class="keyword">let</span> pattyCount): <span class="built_in">print</span>(<span class="string">&quot;a burger with <span class="subst">\(pattyCOunt)</span> patties!&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .fries: <span class="built_in">print</span>(<span class="string">&quot;fries&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .drink: <span class="built_in">print</span>(<span class="string">&quot;drink&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .cookie: <span class="built_in">print</span>(<span class="string">&quot;cookie&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">print</span>(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch也适用于其他类型</p>
<p>enum允许有方法和计算变量，不能有实际存储的变量</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FastFoodMenuItem</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    fun isIncludeInSpeciaOrder(number: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .hamburger(<span class="keyword">let</span> pattyCount): <span class="keyword">return</span> pattyCount <span class="operator">==</span> number</span><br><span class="line">            <span class="keyword">case</span> .fries, .cookie: <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">case</span>.drink(<span class="keyword">_</span>, <span class="keyword">let</span> ounces): <span class="keyword">return</span> ounces <span class="operator">==</span> <span class="number">16</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历所有状态，迭代</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TeslaModel</span>: <span class="title">CaseIterable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">X</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">S</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Three</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> <span class="type">TeslaModel</span>.allCase &#123;</span><br><span class="line">    reportSalesNumber(for: model)</span><br><span class="line">&#125;</span><br><span class="line">fun reportSalesNumber(<span class="keyword">for</span> model: <span class="type">TeslaModel</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> model &#123; <span class="operator">...</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h3><p>两种枚举：存在和不存在</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> none</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">some</span>(<span class="type">T</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hello: <span class="type">String</span>?</span><br><span class="line"><span class="keyword">var</span> hello: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> hello: <span class="type">Striong</span>? <span class="operator">=</span> <span class="literal">nil</span>	<span class="keyword">var</span> hello: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; <span class="operator">=</span> .none</span><br></pre></td></tr></table></figure>

<p>强制解包 !  或者使用if let</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> safehello <span class="operator">=</span> hello &#123;</span><br><span class="line">	<span class="built_in">print</span>(safehello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> y <span class="operator">=</span> x <span class="operator">??</span> <span class="string">&quot;foo&quot;</span> <span class="comment">//如果未设置为foo</span></span><br><span class="line"><span class="keyword">let</span> y <span class="operator">=</span> x<span class="operator">?</span>.foo()<span class="operator">?</span>.bar<span class="operator">?</span>.z <span class="comment">//只要有一个是nil 全是nil</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note7 ViewModifier Animation</title>
    <url>/2022/04/15/cs193p-note7/</url>
    <content><![CDATA[<h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ul>
<li>为Shape设置动画</li>
<li>使用ViewModifier做动画</li>
</ul>
<p>只有改变可以被动画化，改变ViewModifier的参数，Shape的参数，UI中是否存在视图</p>
<p>动画显示给用户已经发生的变化</p>
<span id="more"></span>

<p>ViewModifier是主要的变更代理，更改参数必须在View放入UI之后</p>
<p>视图加入或离开一个已经在用户界面的容器时，才会被动画。如果一个视图带着容器一起出现在屏幕上，容器会被动画化，而不是视图</p>
<h3 id="如何制作动画"><a href="#如何制作动画" class="headerlink" title="如何制作动画"></a>如何制作动画</h3><ol>
<li><p>Implicitly 隐含的自动的，通过使用<code>.animation(Animation)</code> </p>
</li>
<li><p>Explicitly 想要整个UI协调变化的动画 <code>withAnimation(Animation) &#123;&#125;</code> </p>
</li>
<li><p>从UI中包括或排除视图，做独立视图</p>
<p> 所有的只发生在视图已经存在于UI中或或容器在UI中</p>
</li>
</ol>
<h3 id="Implicit-Animation"><a href="#Implicit-Animation" class="headerlink" title="Implicit Animation"></a>Implicit Animation</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	.opacity(scary <span class="operator">?</span> <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">	.rotationEffect(<span class="type">Angle</span>.degrees(upsideDown <span class="operator">?</span> <span class="number">180</span> : <span class="number">0</span>))</span><br><span class="line">	.animation(<span class="type">Animation</span>.easeInOut)</span><br></pre></td></tr></table></figure>

<p>让上面的变化变成动画</p>
<ul>
<li>不适用于任何容器，容器会传播到里面的视图中</li>
<li>其中的参数是一个Animation结构，duration持续时间，delay调用一个小函数，repeat重复一定次数或永久重复(repeatForever)，curve动画曲线</li>
</ul>
<h4 id="Animation-Curve"><a href="#Animation-Curve" class="headerlink" title="Animation Curve"></a>Animation Curve</h4><ul>
<li>linear线性的方式旋转或淡入淡出</li>
<li>easeInOut 开始和结束放慢速度</li>
<li>spring 结束时震荡，提供自然的落地效果</li>
</ul>
<h3 id="Explicit-Animation"><a href="#Explicit-Animation" class="headerlink" title="Explicit Animation"></a>Explicit Animation</h3><p>创建一个动画事务(transaction)，所有符合条件的更改一起制作动画</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">withAnimation(.linear(dutation: <span class="number">2</span>)) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>显式动画总是围绕着ViewModel Intent functions，很有可能改变模型。</p>
<p>&#x3D;&#x3D;<strong>显式动画不会覆盖隐式动画</strong>&#x3D;&#x3D;</p>
<h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>视图的来去，仅适用于已经出现在屏幕上的视图</p>
<p>大多数情况使用预先罐装(opacity, scaling, moving across the screen)，是在AnyTransition结构上的静态函数和变量</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> isFaceUp &#123;</span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10</span>).stroke()</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;👻&quot;</span>).transition(<span class="type">AnyTransition</span>.scale)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10</span>).transition(<span class="type">AnyTransition</span>.identity)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="onAppear"><a href="#onAppear" class="headerlink" title=".onAppear"></a>.onAppear</h4><p>当视图出现在屏幕时执行一个闭包，在容器视图上使用<code>.onAppear&#123;&#125;</code>，当视图出现在屏幕时可以执行一系列代码</p>
<h2 id="ViewModifier"><a href="#ViewModifier" class="headerlink" title="ViewModifier"></a>ViewModifier</h2><p>修改视图的小功能，例如<code>.aspectRatio(2/3)</code></p>
<p>唯一的工作就是修改视图</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Content</span><span class="comment">//正在修改的视图</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span>(<span class="params">content</span>: <span class="type">Content</span>)</span> -&gt; someView &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">some</span> <span class="type">View</span> that almost certainly contains the <span class="type">View</span> content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>特殊的ViewModifier，是GeometryEffect，只修改几何，如缩放、平行、旋转</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cardify</span>: <span class="title">ViewModifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isFaceUp: <span class="type">Bool</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">body</span>(<span class="params">content</span>: <span class="type">Content</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="operator">...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Text</span>(<span class="string">&quot; &quot;</span>).modifier(<span class="type">Cardify</span>(isFaceUp: <span class="literal">true</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cardify</span>(<span class="params">isFaceUp</span>: <span class="type">Bool</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.modifier(<span class="type">Cardify</span>(isFaceUp: isFaceUp))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="GeometryEffect"><a href="#GeometryEffect" class="headerlink" title="GeometryEffect"></a>GeometryEffect</h3><p>使事物旋转，移动物体，调整物体大小等</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.rotationEffect(<span class="type">Angle</span>.degrees(card.isMatched <span class="operator">?</span> <span class="number">360</span> : <span class="number">0</span>))</span><br><span class="line">.animation(<span class="type">Animation</span>.easeInOut(duration: <span class="number">3</span>).repeatForever(autoreverses: <span class="literal">false</span>))<span class="comment">//不会自动反转</span></span><br><span class="line">.animation(<span class="type">Animation</span>.linear(duration: <span class="number">1</span>).repeatForever(autoreverses: <span class="literal">false</span>), value: card.isMatched) <span class="comment">//iOS15.0推荐用法</span></span><br></pre></td></tr></table></figure>

<p>旋转匹配成功的内容，，这么只会旋转第一个内容，而且旋转时字体大小改变，字体不能进行动画，旋转时有多个动画一起发生，要使用固定大小字体。</p>
<p>创建动画时注意三个原则，可以通过opacity使内容在屏幕上隐藏。</p>
<p>animation参考：<a href="https://juejin.cn/post/7067340603494924296">https://juejin.cn/post/7067340603494924296</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
  <entry>
    <title>cs193p_note8 Animation Demostrastion</title>
    <url>/2022/05/02/cs193p-note8/</url>
    <content><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h4 id="实现洗牌动画"><a href="#实现洗牌动画" class="headerlink" title="实现洗牌动画"></a>实现洗牌动画</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> shuffle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Shuffle&quot;</span>) &#123;</span><br><span class="line">        withAnimation &#123;</span><br><span class="line">            game.shuffle()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快速点击shuffle按钮，未完成的动画会自动暂停并继续新的操作，上面图案旋转使用的是隐式动画，独立于显示，所以能在旋转的时候完成洗牌操作。</p>
<h4 id="什么时候使用显示动画"><a href="#什么时候使用显示动画" class="headerlink" title="什么时候使用显示动画"></a>什么时候使用显示动画</h4><p>用于Intent函数，当你表达你的意图时，总是要修改模型。在因为反应而对模型修改，变动视图时使用</p>
<p>一边使用<code>withAnimation() &#123;&#125;</code>包裹在Intent周围</p>
<h4 id="为卡片翻转做动画"><a href="#为卡片翻转做动画" class="headerlink" title="为卡片翻转做动画"></a>为卡片翻转做动画</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.rotation3DEffect(<span class="type">Angle</span>.degrees(isFaceUp <span class="operator">?</span> <span class="number">0</span> : <span class="number">180</span>), axis: (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>使用时，还没翻转90度，就会出现图案，不合理。因为动画是淡入淡出，没翻转90度时，红色的背面会变淡，而表情符号会慢慢显现，所以要跟踪旋转多少角度，进行突然显示</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">init</span>(<span class="params">isFaceUp</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">	rotation <span class="operator">=</span> isFaceUp <span class="operator">?</span> <span class="number">0</span> : <span class="number">180</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用isFaceUp对旋转角度进行初始化。</p>
<p>使用Animatable，对旋转角度进行逐步变化，实现到达90度才会发生变化，自定义ViewModifier</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animatableData: <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; rotation &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; rotation <span class="operator">=</span> newValue &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h4><p>匹配成功时，卡片消失时使用了过渡，是淡入淡出的形式消失的</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.transition(<span class="type">AnyTransition</span>.scale) <span class="comment">//使视图缩小并逐渐消失</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>cs193p</tag>
      </tags>
  </entry>
</search>
